{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// api.interceptors.response.use(\n//   (response) => response,\n//   async (error) => {\n//     const originalRequest = error.config;\n//     if (error.response.status === 401 && error.response.data.expired && !originalRequest._retry) {\n//       originalRequest._retry = true;\n//       try {\n//         const refreshToken = localStorage.getItem('refreshToken');\n//         const response = await axios.post('http://localhost:5000/api/auth/refresh-token', { refreshToken });\n//         const { token } = response.data;\n//         localStorage.setItem('token', token);\n//         api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n//         originalRequest.headers['Authorization'] = `Bearer ${token}`;\n//         return api(originalRequest);\n//       } catch (refreshError) {\n//         // Handle refresh token error (e.g., redirect to login)\n//         return Promise.reject(refreshError);\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject"],"sources":["F:/Out/Outpass-Management-System/my-outpass/src/api/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// api.interceptors.response.use(\r\n//   (response) => response,\r\n//   async (error) => {\r\n//     const originalRequest = error.config;\r\n//     if (error.response.status === 401 && error.response.data.expired && !originalRequest._retry) {\r\n//       originalRequest._retry = true;\r\n//       try {\r\n//         const refreshToken = localStorage.getItem('refreshToken');\r\n//         const response = await axios.post('http://localhost:5000/api/auth/refresh-token', { refreshToken });\r\n//         const { token } = response.data;\r\n//         localStorage.setItem('token', token);\r\n//         api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n//         originalRequest.headers['Authorization'] = `Bearer ${token}`;\r\n//         return api(originalRequest);\r\n//       } catch (refreshError) {\r\n//         // Handle refresh token error (e.g., redirect to login)\r\n//         return Promise.reject(refreshError);\r\n//       }\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}