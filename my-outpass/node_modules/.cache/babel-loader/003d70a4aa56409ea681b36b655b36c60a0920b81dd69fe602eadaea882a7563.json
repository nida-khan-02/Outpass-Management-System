{"ast":null,"code":"var _jsxFileName = \"E:\\\\Out\\\\my-outpass\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\n// import Login from './Components/Login';\n// import StudentDashboard from './Components/StudentDashboard';\n// import WardenDashboard from './Components/WardenDashboard';\n\n// function App() {\n\n//   return (\n\n//     <Router>\n//       <Routes>\n//         <Route path=\"/\" element={<Login />} />\n//         <Route path=\"/student-dashboard\" element={<StudentDashboard />} />\n//         <Route path=\"/warden-dashboard\" element={<WardenDashboard />} />\n//       </Routes>\n//     </Router>\n//   );\n// }\n\n// export default App;\n\n// import React, { useEffect, useState } from 'react';\n// import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\n// import axios from 'axios';\n// import Login from './Components/Login';\n// import StudentDashboard from './Components/StudentDashboard';\n// import WardenDashboard from './Components/WardenDashboard';\n\n// function App() {\n//   const [hostelName, setHostelName] = useState('');\n\n//   useEffect(() => {\n//     // Fetch logged-in user info (assume you have the user's ID stored in localStorage or state)\n//     const fetchHostelName = async () => {\n//       try {\n//         const response = await axios.get('/api/auth/user'); // Assuming the endpoint to get user data\n//         setHostelName(response.data.hostelName);  // Set the hostelName of the logged-in user (warden)\n//       } catch (error) {\n//         console.error('Error fetching user info:', error);\n//       }\n//     };\n\n//     fetchHostelName();\n//   }, []);\n\n//   return (\n//     <Router>\n//       <Routes>\n//         <Route path=\"/\" element={<Login />} />\n//         <Route path=\"/student-dashboard\" element={<StudentDashboard />} />\n//         <Route path=\"/warden-dashboard\" element={<WardenDashboard hostel={hostelName} />} />\n//       </Routes>\n//     </Router>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport axios from 'axios';\nimport Login from './Components/Login';\nimport StudentDashboard from './Components/StudentDashboard';\nimport WardenDashboard from './Components/WardenDashboard';\n// require('dotenv').config();\n// import jwt from 'jsonwebtoken';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [hostelName, setHostelName] = useState(null);\n\n  // Function to check if the user is authenticated\n  const checkAuthentication = () => {\n    const token = localStorage.getItem('token');\n\n    // Assuming you store the JWT in localStorage\n    return token !== null;\n  };\n\n  // Function to fetch the user's hostelName once they are logged in\n  const fetchHostelName = async () => {\n    // const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET);\n    const response = await axios.get('http://localhost:5000/api/auth/user');\n    const {\n      user\n    } = response.data;\n    const token = jwt.sign({\n      userId: user._id\n    }, process.env.JWT_SECRET);\n    // const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const response = await axios.get('http://localhost:5000/api/auth/user', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setHostelName(response.data.hostelName);\n      } catch (error) {\n        console.error('Error fetching hostelName:', error);\n        // Handle token expiration or other auth errors here\n        setIsAuthenticated(false);\n        localStorage.removeItem('token');\n      }\n    }\n  };\n\n  // Effect to check authentication on page load\n  useEffect(() => {\n    const authenticated = checkAuthentication();\n    setIsAuthenticated(authenticated);\n    if (authenticated) {\n      fetchHostelName(); // Fetch hostelName if the user is authenticated\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: !isAuthenticated ?\n      /*#__PURE__*/\n      // Only render Login component if not authenticated\n      _jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Login, {\n          onLoginSuccess: () => {\n            setIsAuthenticated(true);\n            fetchHostelName();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/student-dashboard\",\n          element: /*#__PURE__*/_jsxDEV(StudentDashboard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 55\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/warden-dashboard\",\n          element: /*#__PURE__*/_jsxDEV(WardenDashboard, {\n            hostel: hostelName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 54\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"X6AxyC+3x0I8m4em07mR0IBz11k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","axios","Login","StudentDashboard","WardenDashboard","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isAuthenticated","setIsAuthenticated","hostelName","setHostelName","checkAuthentication","token","localStorage","getItem","fetchHostelName","response","get","user","data","jwt","sign","userId","_id","process","env","JWT_SECRET","headers","Authorization","error","console","removeItem","authenticated","children","path","element","onLoginSuccess","fileName","_jsxFileName","lineNumber","columnNumber","hostel","_c","$RefreshReg$"],"sources":["E:/Out/my-outpass/src/App.js"],"sourcesContent":["// import React from 'react';\r\n// import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\n// import Login from './Components/Login';\r\n// import StudentDashboard from './Components/StudentDashboard';\r\n// import WardenDashboard from './Components/WardenDashboard';\r\n\r\n\r\n// function App() {\r\n \r\n//   return (\r\n    \r\n//     <Router>\r\n//       <Routes>\r\n//         <Route path=\"/\" element={<Login />} />\r\n//         <Route path=\"/student-dashboard\" element={<StudentDashboard />} />\r\n//         <Route path=\"/warden-dashboard\" element={<WardenDashboard />} />\r\n//       </Routes>\r\n//     </Router>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import Login from './Components/Login';\r\n// import StudentDashboard from './Components/StudentDashboard';\r\n// import WardenDashboard from './Components/WardenDashboard';\r\n\r\n// function App() {\r\n//   const [hostelName, setHostelName] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     // Fetch logged-in user info (assume you have the user's ID stored in localStorage or state)\r\n//     const fetchHostelName = async () => {\r\n//       try {\r\n//         const response = await axios.get('/api/auth/user'); // Assuming the endpoint to get user data\r\n//         setHostelName(response.data.hostelName);  // Set the hostelName of the logged-in user (warden)\r\n//       } catch (error) {\r\n//         console.error('Error fetching user info:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchHostelName();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <Router>\r\n//       <Routes>\r\n//         <Route path=\"/\" element={<Login />} />\r\n//         <Route path=\"/student-dashboard\" element={<StudentDashboard />} />\r\n//         <Route path=\"/warden-dashboard\" element={<WardenDashboard hostel={hostelName} />} />\r\n//       </Routes>\r\n//     </Router>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport axios from 'axios'; \r\nimport Login from './Components/Login';\r\nimport StudentDashboard from './Components/StudentDashboard';\r\nimport WardenDashboard from './Components/WardenDashboard';\r\n// require('dotenv').config();\r\n// import jwt from 'jsonwebtoken';\r\n\r\n\r\n\r\nfunction App() {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [hostelName, setHostelName] = useState(null);\r\n \r\n\r\n\r\n\r\n  // Function to check if the user is authenticated\r\n  const checkAuthentication = () => {\r\n    const token = localStorage.getItem('token');\r\n   \r\n\r\n  // Assuming you store the JWT in localStorage\r\n    return token !== null;\r\n  };\r\n\r\n  // Function to fetch the user's hostelName once they are logged in\r\n  const fetchHostelName = async () => {\r\n    // const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET);\r\n    const response = await axios.get('http://localhost:5000/api/auth/user');\r\n    const { user } = response.data;\r\n     \r\n      const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET);\r\n    // const token = localStorage.getItem('token');\r\n    if (token) {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/auth/user', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n        setHostelName(response.data.hostelName);\r\n      } catch (error) {\r\n        console.error('Error fetching hostelName:', error);\r\n        // Handle token expiration or other auth errors here\r\n        setIsAuthenticated(false);\r\n        localStorage.removeItem('token');\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  // Effect to check authentication on page load\r\n  useEffect(() => {\r\n    const authenticated = checkAuthentication();\r\n    setIsAuthenticated(authenticated);\r\n    if (authenticated) {\r\n      fetchHostelName();  // Fetch hostelName if the user is authenticated\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        {!isAuthenticated ? (\r\n          // Only render Login component if not authenticated\r\n          <Route path=\"/\" element={<Login onLoginSuccess={() => {\r\n            setIsAuthenticated(true);\r\n            fetchHostelName();\r\n          }} />} />\r\n        ) : (\r\n          <>\r\n            <Route path=\"/student-dashboard\" element={<StudentDashboard />} />\r\n            {/* Pass hostelName as a prop to WardenDashboard */}\r\n            <Route path=\"/warden-dashboard\" element={<WardenDashboard hostel={hostelName} />} />\r\n          </>\r\n        )}\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}