{"ast":null,"code":"'use strict';\n\nconst numberRE = /^\\d+$/;\n\n/**\n * Behaves like `Schema#path()`, except for it also digs into arrays without\n * needing to put `.0.`, so `getPath(schema, 'docArr.elProp')` works.\n * @api private\n */\n\nmodule.exports = function getPath(schema, path) {\n  let schematype = schema.path(path);\n  if (schematype != null) {\n    return schematype;\n  }\n  const pieces = path.split('.');\n  let cur = '';\n  let isArray = false;\n  for (const piece of pieces) {\n    if (isArray && numberRE.test(piece)) {\n      continue;\n    }\n    cur = cur.length === 0 ? piece : cur + '.' + piece;\n    schematype = schema.path(cur);\n    if (schematype != null && schematype.schema) {\n      schema = schematype.schema;\n      cur = '';\n      if (!isArray && schematype.$isMongooseDocumentArray) {\n        isArray = true;\n      }\n    }\n  }\n  return schematype;\n};","map":{"version":3,"names":["numberRE","module","exports","getPath","schema","path","schematype","pieces","split","cur","isArray","piece","test","length","$isMongooseDocumentArray"],"sources":["E:/Out/my-outpass/node_modules/mongoose/lib/helpers/schema/getPath.js"],"sourcesContent":["'use strict';\n\nconst numberRE = /^\\d+$/;\n\n/**\n * Behaves like `Schema#path()`, except for it also digs into arrays without\n * needing to put `.0.`, so `getPath(schema, 'docArr.elProp')` works.\n * @api private\n */\n\nmodule.exports = function getPath(schema, path) {\n  let schematype = schema.path(path);\n  if (schematype != null) {\n    return schematype;\n  }\n  const pieces = path.split('.');\n  let cur = '';\n  let isArray = false;\n\n  for (const piece of pieces) {\n    if (isArray && numberRE.test(piece)) {\n      continue;\n    }\n    cur = cur.length === 0 ? piece : cur + '.' + piece;\n\n    schematype = schema.path(cur);\n    if (schematype != null && schematype.schema) {\n      schema = schematype.schema;\n      cur = '';\n      if (!isArray && schematype.$isMongooseDocumentArray) {\n        isArray = true;\n      }\n    }\n  }\n\n  return schematype;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,QAAQ,GAAG,OAAO;;AAExB;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,SAASC,OAAOA,CAACC,MAAM,EAAEC,IAAI,EAAE;EAC9C,IAAIC,UAAU,GAAGF,MAAM,CAACC,IAAI,CAACA,IAAI,CAAC;EAClC,IAAIC,UAAU,IAAI,IAAI,EAAE;IACtB,OAAOA,UAAU;EACnB;EACA,MAAMC,MAAM,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EAC9B,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,OAAO,GAAG,KAAK;EAEnB,KAAK,MAAMC,KAAK,IAAIJ,MAAM,EAAE;IAC1B,IAAIG,OAAO,IAAIV,QAAQ,CAACY,IAAI,CAACD,KAAK,CAAC,EAAE;MACnC;IACF;IACAF,GAAG,GAAGA,GAAG,CAACI,MAAM,KAAK,CAAC,GAAGF,KAAK,GAAGF,GAAG,GAAG,GAAG,GAAGE,KAAK;IAElDL,UAAU,GAAGF,MAAM,CAACC,IAAI,CAACI,GAAG,CAAC;IAC7B,IAAIH,UAAU,IAAI,IAAI,IAAIA,UAAU,CAACF,MAAM,EAAE;MAC3CA,MAAM,GAAGE,UAAU,CAACF,MAAM;MAC1BK,GAAG,GAAG,EAAE;MACR,IAAI,CAACC,OAAO,IAAIJ,UAAU,CAACQ,wBAAwB,EAAE;QACnDJ,OAAO,GAAG,IAAI;MAChB;IACF;EACF;EAEA,OAAOJ,UAAU;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}