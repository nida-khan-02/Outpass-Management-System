{"ast":null,"code":"'use strict';\n\nconst modifiedPaths = require('./common').modifiedPaths;\nconst get = require('./get');\n\n/**\n * Applies defaults to update and findOneAndUpdate operations.\n *\n * @param {Object} filter\n * @param {Schema} schema\n * @param {Object} castedDoc\n * @param {Object} options\n * @method setDefaultsOnInsert\n * @api private\n */\n\nmodule.exports = function (filter, schema, castedDoc, options) {\n  options = options || {};\n  const shouldSetDefaultsOnInsert = options.setDefaultsOnInsert != null ? options.setDefaultsOnInsert : schema.base.options.setDefaultsOnInsert;\n  if (!options.upsert || shouldSetDefaultsOnInsert === false) {\n    return castedDoc;\n  }\n  const keys = Object.keys(castedDoc || {});\n  const updatedKeys = {};\n  const updatedValues = {};\n  const numKeys = keys.length;\n  const modified = {};\n  let hasDollarUpdate = false;\n  for (let i = 0; i < numKeys; ++i) {\n    if (keys[i].startsWith('$')) {\n      modifiedPaths(castedDoc[keys[i]], '', modified);\n      hasDollarUpdate = true;\n    }\n  }\n  if (!hasDollarUpdate) {\n    modifiedPaths(castedDoc, '', modified);\n  }\n  const paths = Object.keys(filter);\n  const numPaths = paths.length;\n  for (let i = 0; i < numPaths; ++i) {\n    const path = paths[i];\n    const condition = filter[path];\n    if (condition && typeof condition === 'object') {\n      const conditionKeys = Object.keys(condition);\n      const numConditionKeys = conditionKeys.length;\n      let hasDollarKey = false;\n      for (let j = 0; j < numConditionKeys; ++j) {\n        if (conditionKeys[j].startsWith('$')) {\n          hasDollarKey = true;\n          break;\n        }\n      }\n      if (hasDollarKey) {\n        continue;\n      }\n    }\n    updatedKeys[path] = true;\n    modified[path] = true;\n  }\n  if (options && options.overwrite && !hasDollarUpdate) {\n    // Defaults will be set later, since we're overwriting we'll cast\n    // the whole update to a document\n    return castedDoc;\n  }\n  schema.eachPath(function (path, schemaType) {\n    // Skip single nested paths if underneath a map\n    if (schemaType.path === '_id' && schemaType.options.auto) {\n      return;\n    }\n    const def = schemaType.getDefault(null, true);\n    if (isModified(modified, path)) {\n      return;\n    }\n    if (typeof def === 'undefined') {\n      return;\n    }\n    if (schemaType.splitPath().includes('$*')) {\n      // Skip defaults underneath maps. We should never do `$setOnInsert` on a path with `$*`\n      return;\n    }\n    castedDoc = castedDoc || {};\n    castedDoc.$setOnInsert = castedDoc.$setOnInsert || {};\n    if (get(castedDoc, path) == null) {\n      castedDoc.$setOnInsert[path] = def;\n    }\n    updatedValues[path] = def;\n  });\n  return castedDoc;\n};\nfunction isModified(modified, path) {\n  if (modified[path]) {\n    return true;\n  }\n\n  // Is any parent path of `path` modified?\n  const sp = path.split('.');\n  let cur = sp[0];\n  for (let i = 1; i < sp.length; ++i) {\n    if (modified[cur]) {\n      return true;\n    }\n    cur += '.' + sp[i];\n  }\n\n  // Is any child of `path` modified?\n  const modifiedKeys = Object.keys(modified);\n  if (modifiedKeys.length) {\n    const parentPath = path + '.';\n    for (const modifiedPath of modifiedKeys) {\n      if (modifiedPath.slice(0, path.length + 1) === parentPath) {\n        return true;\n      }\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["modifiedPaths","require","get","module","exports","filter","schema","castedDoc","options","shouldSetDefaultsOnInsert","setDefaultsOnInsert","base","upsert","keys","Object","updatedKeys","updatedValues","numKeys","length","modified","hasDollarUpdate","i","startsWith","paths","numPaths","path","condition","conditionKeys","numConditionKeys","hasDollarKey","j","overwrite","eachPath","schemaType","auto","def","getDefault","isModified","splitPath","includes","$setOnInsert","sp","split","cur","modifiedKeys","parentPath","modifiedPath","slice"],"sources":["E:/Out/my-outpass/node_modules/mongoose/lib/helpers/setDefaultsOnInsert.js"],"sourcesContent":["'use strict';\nconst modifiedPaths = require('./common').modifiedPaths;\nconst get = require('./get');\n\n/**\n * Applies defaults to update and findOneAndUpdate operations.\n *\n * @param {Object} filter\n * @param {Schema} schema\n * @param {Object} castedDoc\n * @param {Object} options\n * @method setDefaultsOnInsert\n * @api private\n */\n\nmodule.exports = function(filter, schema, castedDoc, options) {\n  options = options || {};\n\n  const shouldSetDefaultsOnInsert =\n    options.setDefaultsOnInsert != null ?\n      options.setDefaultsOnInsert :\n      schema.base.options.setDefaultsOnInsert;\n\n  if (!options.upsert || shouldSetDefaultsOnInsert === false) {\n    return castedDoc;\n  }\n\n  const keys = Object.keys(castedDoc || {});\n  const updatedKeys = {};\n  const updatedValues = {};\n  const numKeys = keys.length;\n  const modified = {};\n\n  let hasDollarUpdate = false;\n\n  for (let i = 0; i < numKeys; ++i) {\n    if (keys[i].startsWith('$')) {\n      modifiedPaths(castedDoc[keys[i]], '', modified);\n      hasDollarUpdate = true;\n    }\n  }\n\n  if (!hasDollarUpdate) {\n    modifiedPaths(castedDoc, '', modified);\n  }\n\n  const paths = Object.keys(filter);\n  const numPaths = paths.length;\n  for (let i = 0; i < numPaths; ++i) {\n    const path = paths[i];\n    const condition = filter[path];\n    if (condition && typeof condition === 'object') {\n      const conditionKeys = Object.keys(condition);\n      const numConditionKeys = conditionKeys.length;\n      let hasDollarKey = false;\n      for (let j = 0; j < numConditionKeys; ++j) {\n        if (conditionKeys[j].startsWith('$')) {\n          hasDollarKey = true;\n          break;\n        }\n      }\n      if (hasDollarKey) {\n        continue;\n      }\n    }\n    updatedKeys[path] = true;\n    modified[path] = true;\n  }\n\n  if (options && options.overwrite && !hasDollarUpdate) {\n    // Defaults will be set later, since we're overwriting we'll cast\n    // the whole update to a document\n    return castedDoc;\n  }\n\n  schema.eachPath(function(path, schemaType) {\n    // Skip single nested paths if underneath a map\n    if (schemaType.path === '_id' && schemaType.options.auto) {\n      return;\n    }\n    const def = schemaType.getDefault(null, true);\n    if (isModified(modified, path)) {\n      return;\n    }\n    if (typeof def === 'undefined') {\n      return;\n    }\n    if (schemaType.splitPath().includes('$*')) {\n      // Skip defaults underneath maps. We should never do `$setOnInsert` on a path with `$*`\n      return;\n    }\n\n    castedDoc = castedDoc || {};\n    castedDoc.$setOnInsert = castedDoc.$setOnInsert || {};\n    if (get(castedDoc, path) == null) {\n      castedDoc.$setOnInsert[path] = def;\n    }\n    updatedValues[path] = def;\n  });\n\n  return castedDoc;\n};\n\nfunction isModified(modified, path) {\n  if (modified[path]) {\n    return true;\n  }\n\n  // Is any parent path of `path` modified?\n  const sp = path.split('.');\n  let cur = sp[0];\n  for (let i = 1; i < sp.length; ++i) {\n    if (modified[cur]) {\n      return true;\n    }\n    cur += '.' + sp[i];\n  }\n\n  // Is any child of `path` modified?\n  const modifiedKeys = Object.keys(modified);\n  if (modifiedKeys.length) {\n    const parentPath = path + '.';\n\n    for (const modifiedPath of modifiedKeys) {\n      if (modifiedPath.slice(0, path.length + 1) === parentPath) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}