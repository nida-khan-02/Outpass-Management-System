{"ast":null,"code":"'use strict';\n\nmodule.exports = applyEmbeddedDiscriminators;\nfunction applyEmbeddedDiscriminators(schema, seen = new WeakSet(), overwriteExisting = false) {\n  if (seen.has(schema)) {\n    return;\n  }\n  seen.add(schema);\n  for (const path of Object.keys(schema.paths)) {\n    const schemaType = schema.paths[path];\n    if (!schemaType.schema) {\n      continue;\n    }\n    applyEmbeddedDiscriminators(schemaType.schema, seen);\n    if (!schemaType.schema._applyDiscriminators) {\n      continue;\n    }\n    if (schemaType._appliedDiscriminators && !overwriteExisting) {\n      continue;\n    }\n    for (const discriminatorKey of schemaType.schema._applyDiscriminators.keys()) {\n      const {\n        schema: discriminatorSchema,\n        options\n      } = schemaType.schema._applyDiscriminators.get(discriminatorKey);\n      applyEmbeddedDiscriminators(discriminatorSchema, seen);\n      schemaType.discriminator(discriminatorKey, discriminatorSchema, overwriteExisting ? {\n        ...options,\n        overwriteExisting: true\n      } : options);\n    }\n    schemaType._appliedDiscriminators = true;\n  }\n}","map":{"version":3,"names":["module","exports","applyEmbeddedDiscriminators","schema","seen","WeakSet","overwriteExisting","has","add","path","Object","keys","paths","schemaType","_applyDiscriminators","_appliedDiscriminators","discriminatorKey","discriminatorSchema","options","get","discriminator"],"sources":["E:/Out/my-outpass/node_modules/mongoose/lib/helpers/discriminator/applyEmbeddedDiscriminators.js"],"sourcesContent":["'use strict';\n\nmodule.exports = applyEmbeddedDiscriminators;\n\nfunction applyEmbeddedDiscriminators(schema, seen = new WeakSet(), overwriteExisting = false) {\n  if (seen.has(schema)) {\n    return;\n  }\n  seen.add(schema);\n  for (const path of Object.keys(schema.paths)) {\n    const schemaType = schema.paths[path];\n    if (!schemaType.schema) {\n      continue;\n    }\n    applyEmbeddedDiscriminators(schemaType.schema, seen);\n    if (!schemaType.schema._applyDiscriminators) {\n      continue;\n    }\n    if (schemaType._appliedDiscriminators && !overwriteExisting) {\n      continue;\n    }\n    for (const discriminatorKey of schemaType.schema._applyDiscriminators.keys()) {\n      const {\n        schema: discriminatorSchema,\n        options\n      } = schemaType.schema._applyDiscriminators.get(discriminatorKey);\n      applyEmbeddedDiscriminators(discriminatorSchema, seen);\n      schemaType.discriminator(\n        discriminatorKey,\n        discriminatorSchema,\n        overwriteExisting ? { ...options, overwriteExisting: true } : options\n      );\n    }\n    schemaType._appliedDiscriminators = true;\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,2BAA2B;AAE5C,SAASA,2BAA2BA,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,OAAO,CAAC,CAAC,EAAEC,iBAAiB,GAAG,KAAK,EAAE;EAC5F,IAAIF,IAAI,CAACG,GAAG,CAACJ,MAAM,CAAC,EAAE;IACpB;EACF;EACAC,IAAI,CAACI,GAAG,CAACL,MAAM,CAAC;EAChB,KAAK,MAAMM,IAAI,IAAIC,MAAM,CAACC,IAAI,CAACR,MAAM,CAACS,KAAK,CAAC,EAAE;IAC5C,MAAMC,UAAU,GAAGV,MAAM,CAACS,KAAK,CAACH,IAAI,CAAC;IACrC,IAAI,CAACI,UAAU,CAACV,MAAM,EAAE;MACtB;IACF;IACAD,2BAA2B,CAACW,UAAU,CAACV,MAAM,EAAEC,IAAI,CAAC;IACpD,IAAI,CAACS,UAAU,CAACV,MAAM,CAACW,oBAAoB,EAAE;MAC3C;IACF;IACA,IAAID,UAAU,CAACE,sBAAsB,IAAI,CAACT,iBAAiB,EAAE;MAC3D;IACF;IACA,KAAK,MAAMU,gBAAgB,IAAIH,UAAU,CAACV,MAAM,CAACW,oBAAoB,CAACH,IAAI,CAAC,CAAC,EAAE;MAC5E,MAAM;QACJR,MAAM,EAAEc,mBAAmB;QAC3BC;MACF,CAAC,GAAGL,UAAU,CAACV,MAAM,CAACW,oBAAoB,CAACK,GAAG,CAACH,gBAAgB,CAAC;MAChEd,2BAA2B,CAACe,mBAAmB,EAAEb,IAAI,CAAC;MACtDS,UAAU,CAACO,aAAa,CACtBJ,gBAAgB,EAChBC,mBAAmB,EACnBX,iBAAiB,GAAG;QAAE,GAAGY,OAAO;QAAEZ,iBAAiB,EAAE;MAAK,CAAC,GAAGY,OAChE,CAAC;IACH;IACAL,UAAU,CAACE,sBAAsB,GAAG,IAAI;EAC1C;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}