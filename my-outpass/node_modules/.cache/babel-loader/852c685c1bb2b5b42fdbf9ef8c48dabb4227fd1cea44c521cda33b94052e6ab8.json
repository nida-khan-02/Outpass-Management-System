{"ast":null,"code":"'use strict';\n\nconst isOperator = require('./isOperator');\nmodule.exports = function castFilterPath(ctx, schematype, val) {\n  const any$conditionals = Object.keys(val).some(isOperator);\n  if (!any$conditionals) {\n    return schematype.castForQuery(null, val, ctx);\n  }\n  const ks = Object.keys(val);\n  let k = ks.length;\n  while (k--) {\n    const $cond = ks[k];\n    const nested = val[$cond];\n    if ($cond === '$not') {\n      if (nested && schematype && !schematype.caster) {\n        const _keys = Object.keys(nested);\n        if (_keys.length && isOperator(_keys[0])) {\n          for (const key of Object.keys(nested)) {\n            nested[key] = schematype.castForQuery(key, nested[key], ctx);\n          }\n        } else {\n          val[$cond] = schematype.castForQuery($cond, nested, ctx);\n        }\n        continue;\n      }\n    } else {\n      val[$cond] = schematype.castForQuery($cond, nested, ctx);\n    }\n  }\n  return val;\n};","map":{"version":3,"names":["isOperator","require","module","exports","castFilterPath","ctx","schematype","val","any$conditionals","Object","keys","some","castForQuery","ks","k","length","$cond","nested","caster","_keys","key"],"sources":["E:/Out/my-outpass/node_modules/mongoose/lib/helpers/query/castFilterPath.js"],"sourcesContent":["'use strict';\n\nconst isOperator = require('./isOperator');\n\nmodule.exports = function castFilterPath(ctx, schematype, val) {\n  const any$conditionals = Object.keys(val).some(isOperator);\n\n  if (!any$conditionals) {\n    return schematype.castForQuery(\n      null,\n      val,\n      ctx\n    );\n  }\n\n  const ks = Object.keys(val);\n\n  let k = ks.length;\n\n  while (k--) {\n    const $cond = ks[k];\n    const nested = val[$cond];\n\n    if ($cond === '$not') {\n      if (nested && schematype && !schematype.caster) {\n        const _keys = Object.keys(nested);\n        if (_keys.length && isOperator(_keys[0])) {\n          for (const key of Object.keys(nested)) {\n            nested[key] = schematype.castForQuery(\n              key,\n              nested[key],\n              ctx\n            );\n          }\n        } else {\n          val[$cond] = schematype.castForQuery(\n            $cond,\n            nested,\n            ctx\n          );\n        }\n        continue;\n      }\n    } else {\n      val[$cond] = schematype.castForQuery(\n        $cond,\n        nested,\n        ctx\n      );\n    }\n  }\n\n  return val;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AAE1CC,MAAM,CAACC,OAAO,GAAG,SAASC,cAAcA,CAACC,GAAG,EAAEC,UAAU,EAAEC,GAAG,EAAE;EAC7D,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACI,IAAI,CAACX,UAAU,CAAC;EAE1D,IAAI,CAACQ,gBAAgB,EAAE;IACrB,OAAOF,UAAU,CAACM,YAAY,CAC5B,IAAI,EACJL,GAAG,EACHF,GACF,CAAC;EACH;EAEA,MAAMQ,EAAE,GAAGJ,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC;EAE3B,IAAIO,CAAC,GAAGD,EAAE,CAACE,MAAM;EAEjB,OAAOD,CAAC,EAAE,EAAE;IACV,MAAME,KAAK,GAAGH,EAAE,CAACC,CAAC,CAAC;IACnB,MAAMG,MAAM,GAAGV,GAAG,CAACS,KAAK,CAAC;IAEzB,IAAIA,KAAK,KAAK,MAAM,EAAE;MACpB,IAAIC,MAAM,IAAIX,UAAU,IAAI,CAACA,UAAU,CAACY,MAAM,EAAE;QAC9C,MAAMC,KAAK,GAAGV,MAAM,CAACC,IAAI,CAACO,MAAM,CAAC;QACjC,IAAIE,KAAK,CAACJ,MAAM,IAAIf,UAAU,CAACmB,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;UACxC,KAAK,MAAMC,GAAG,IAAIX,MAAM,CAACC,IAAI,CAACO,MAAM,CAAC,EAAE;YACrCA,MAAM,CAACG,GAAG,CAAC,GAAGd,UAAU,CAACM,YAAY,CACnCQ,GAAG,EACHH,MAAM,CAACG,GAAG,CAAC,EACXf,GACF,CAAC;UACH;QACF,CAAC,MAAM;UACLE,GAAG,CAACS,KAAK,CAAC,GAAGV,UAAU,CAACM,YAAY,CAClCI,KAAK,EACLC,MAAM,EACNZ,GACF,CAAC;QACH;QACA;MACF;IACF,CAAC,MAAM;MACLE,GAAG,CAACS,KAAK,CAAC,GAAGV,UAAU,CAACM,YAAY,CAClCI,KAAK,EACLC,MAAM,EACNZ,GACF,CAAC;IACH;EACF;EAEA,OAAOE,GAAG;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}