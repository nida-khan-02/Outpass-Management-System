{"ast":null,"code":"'use strict';\n\nconst hasDollarKeys = require('../query/hasDollarKeys');\nfunction getRelatedSchemaIndexes(model, schemaIndexes) {\n  return getRelatedIndexes({\n    baseModelName: model.baseModelName,\n    discriminatorMapping: model.schema.discriminatorMapping,\n    indexes: schemaIndexes,\n    indexesType: 'schema'\n  });\n}\nfunction getRelatedDBIndexes(model, dbIndexes) {\n  return getRelatedIndexes({\n    baseModelName: model.baseModelName,\n    discriminatorMapping: model.schema.discriminatorMapping,\n    indexes: dbIndexes,\n    indexesType: 'db'\n  });\n}\nmodule.exports = {\n  getRelatedSchemaIndexes,\n  getRelatedDBIndexes\n};\nfunction getRelatedIndexes({\n  baseModelName,\n  discriminatorMapping,\n  indexes,\n  indexesType\n}) {\n  const discriminatorKey = discriminatorMapping && discriminatorMapping.key;\n  const discriminatorValue = discriminatorMapping && discriminatorMapping.value;\n  if (!discriminatorKey) {\n    return indexes;\n  }\n  const isChildDiscriminatorModel = Boolean(baseModelName);\n  if (isChildDiscriminatorModel) {\n    return indexes.filter(index => {\n      const partialFilterExpression = getPartialFilterExpression(index, indexesType);\n      return partialFilterExpression && partialFilterExpression[discriminatorKey] === discriminatorValue;\n    });\n  }\n  return indexes.filter(index => {\n    const partialFilterExpression = getPartialFilterExpression(index, indexesType);\n    return !partialFilterExpression || !partialFilterExpression[discriminatorKey] || hasDollarKeys(partialFilterExpression[discriminatorKey]) && !('$eq' in partialFilterExpression[discriminatorKey]);\n  });\n}\nfunction getPartialFilterExpression(index, indexesType) {\n  if (indexesType === 'schema') {\n    const options = index[1];\n    return options && options.partialFilterExpression;\n  }\n  return index.partialFilterExpression;\n}","map":{"version":3,"names":["hasDollarKeys","require","getRelatedSchemaIndexes","model","schemaIndexes","getRelatedIndexes","baseModelName","discriminatorMapping","schema","indexes","indexesType","getRelatedDBIndexes","dbIndexes","module","exports","discriminatorKey","key","discriminatorValue","value","isChildDiscriminatorModel","Boolean","filter","index","partialFilterExpression","getPartialFilterExpression","options"],"sources":["E:/Out/my-outpass/node_modules/mongoose/lib/helpers/indexes/getRelatedIndexes.js"],"sourcesContent":["'use strict';\n\nconst hasDollarKeys = require('../query/hasDollarKeys');\n\nfunction getRelatedSchemaIndexes(model, schemaIndexes) {\n  return getRelatedIndexes({\n    baseModelName: model.baseModelName,\n    discriminatorMapping: model.schema.discriminatorMapping,\n    indexes: schemaIndexes,\n    indexesType: 'schema'\n  });\n}\n\nfunction getRelatedDBIndexes(model, dbIndexes) {\n  return getRelatedIndexes({\n    baseModelName: model.baseModelName,\n    discriminatorMapping: model.schema.discriminatorMapping,\n    indexes: dbIndexes,\n    indexesType: 'db'\n  });\n}\n\nmodule.exports = {\n  getRelatedSchemaIndexes,\n  getRelatedDBIndexes\n};\n\nfunction getRelatedIndexes({\n  baseModelName,\n  discriminatorMapping,\n  indexes,\n  indexesType\n}) {\n  const discriminatorKey = discriminatorMapping && discriminatorMapping.key;\n  const discriminatorValue = discriminatorMapping && discriminatorMapping.value;\n\n  if (!discriminatorKey) {\n    return indexes;\n  }\n\n  const isChildDiscriminatorModel = Boolean(baseModelName);\n  if (isChildDiscriminatorModel) {\n    return indexes.filter(index => {\n      const partialFilterExpression = getPartialFilterExpression(index, indexesType);\n      return partialFilterExpression && partialFilterExpression[discriminatorKey] === discriminatorValue;\n    });\n  }\n\n  return indexes.filter(index => {\n    const partialFilterExpression = getPartialFilterExpression(index, indexesType);\n    return !partialFilterExpression\n      || !partialFilterExpression[discriminatorKey]\n      || (hasDollarKeys(partialFilterExpression[discriminatorKey]) && !('$eq' in partialFilterExpression[discriminatorKey]));\n  });\n}\n\nfunction getPartialFilterExpression(index, indexesType) {\n  if (indexesType === 'schema') {\n    const options = index[1];\n    return options && options.partialFilterExpression;\n  }\n  return index.partialFilterExpression;\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAEvD,SAASC,uBAAuBA,CAACC,KAAK,EAAEC,aAAa,EAAE;EACrD,OAAOC,iBAAiB,CAAC;IACvBC,aAAa,EAAEH,KAAK,CAACG,aAAa;IAClCC,oBAAoB,EAAEJ,KAAK,CAACK,MAAM,CAACD,oBAAoB;IACvDE,OAAO,EAAEL,aAAa;IACtBM,WAAW,EAAE;EACf,CAAC,CAAC;AACJ;AAEA,SAASC,mBAAmBA,CAACR,KAAK,EAAES,SAAS,EAAE;EAC7C,OAAOP,iBAAiB,CAAC;IACvBC,aAAa,EAAEH,KAAK,CAACG,aAAa;IAClCC,oBAAoB,EAAEJ,KAAK,CAACK,MAAM,CAACD,oBAAoB;IACvDE,OAAO,EAAEG,SAAS;IAClBF,WAAW,EAAE;EACf,CAAC,CAAC;AACJ;AAEAG,MAAM,CAACC,OAAO,GAAG;EACfZ,uBAAuB;EACvBS;AACF,CAAC;AAED,SAASN,iBAAiBA,CAAC;EACzBC,aAAa;EACbC,oBAAoB;EACpBE,OAAO;EACPC;AACF,CAAC,EAAE;EACD,MAAMK,gBAAgB,GAAGR,oBAAoB,IAAIA,oBAAoB,CAACS,GAAG;EACzE,MAAMC,kBAAkB,GAAGV,oBAAoB,IAAIA,oBAAoB,CAACW,KAAK;EAE7E,IAAI,CAACH,gBAAgB,EAAE;IACrB,OAAON,OAAO;EAChB;EAEA,MAAMU,yBAAyB,GAAGC,OAAO,CAACd,aAAa,CAAC;EACxD,IAAIa,yBAAyB,EAAE;IAC7B,OAAOV,OAAO,CAACY,MAAM,CAACC,KAAK,IAAI;MAC7B,MAAMC,uBAAuB,GAAGC,0BAA0B,CAACF,KAAK,EAAEZ,WAAW,CAAC;MAC9E,OAAOa,uBAAuB,IAAIA,uBAAuB,CAACR,gBAAgB,CAAC,KAAKE,kBAAkB;IACpG,CAAC,CAAC;EACJ;EAEA,OAAOR,OAAO,CAACY,MAAM,CAACC,KAAK,IAAI;IAC7B,MAAMC,uBAAuB,GAAGC,0BAA0B,CAACF,KAAK,EAAEZ,WAAW,CAAC;IAC9E,OAAO,CAACa,uBAAuB,IAC1B,CAACA,uBAAuB,CAACR,gBAAgB,CAAC,IACzCf,aAAa,CAACuB,uBAAuB,CAACR,gBAAgB,CAAC,CAAC,IAAI,EAAE,KAAK,IAAIQ,uBAAuB,CAACR,gBAAgB,CAAC,CAAE;EAC1H,CAAC,CAAC;AACJ;AAEA,SAASS,0BAA0BA,CAACF,KAAK,EAAEZ,WAAW,EAAE;EACtD,IAAIA,WAAW,KAAK,QAAQ,EAAE;IAC5B,MAAMe,OAAO,GAAGH,KAAK,CAAC,CAAC,CAAC;IACxB,OAAOG,OAAO,IAAIA,OAAO,CAACF,uBAAuB;EACnD;EACA,OAAOD,KAAK,CAACC,uBAAuB;AACtC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}