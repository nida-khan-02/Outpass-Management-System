{"ast":null,"code":"// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import api from '../api';\n\n// const AuthContext = createContext();\n\n// export function AuthProvider({ children }) {\n//   const [currentUser, setCurrentUser] = useState(null);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       // Verify token and set user\n//       api.get('http://localhost:5000/api/auth/verify', { headers: { 'x-auth-token': token } })\n//         .then(res => setCurrentUser(res.data))\n//         .catch(err => localStorage.removeItem('token'));\n//     }\n//   }, []);\n\n//   return (\n//     <AuthContext.Provider value={{ currentUser, setCurrentUser }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// }\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }","map":{"version":3,"names":[],"sources":["E:/Out/my-outpass/src/contexts/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n// import api from '../api';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       // Verify token and set user\r\n//       api.get('http://localhost:5000/api/auth/verify', { headers: { 'x-auth-token': token } })\r\n//         .then(res => setCurrentUser(res.data))\r\n//         .catch(err => localStorage.removeItem('token'));\r\n//     }\r\n//   }, []);\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ currentUser, setCurrentUser }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}