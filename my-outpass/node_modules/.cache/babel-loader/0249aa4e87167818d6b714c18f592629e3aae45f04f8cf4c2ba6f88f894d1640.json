{"ast":null,"code":"var _jsxFileName = \"F:\\\\Out\\\\Outpass-Management-System\\\\my-outpass\\\\src\\\\App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\n// import axios from 'axios'; \nimport Login from './Components/Login';\n// import StudentDashboard from './Components/StudentDashboard';\n// import WardenDashboard from './Components/WardenDashboard';\nimport { AuthProvider } from './contexts/AuthContext';\n// import { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // const Navigate = useNavigate();\n\n  // const [isAuthenticated, setIsAuthenticated] = useState(false);\n  // // const [hostelName, setHostelName] = useState(null);\n\n  // // Function to check if the user is authenticated\n  // const checkAuthentication = () => {\n  //   const token = localStorage.getItem('token');\n  //   return token !== null;\n  // };\n\n  // // Function to fetch the user's hostelName once they are logged in\n  // const fetchHostelName = async () => {\n  // //  // Fetch the user's hostelName using the token\n  //   const token = localStorage.getItem('token');\n  //   console.log('Token:', token);\n\n  //   if (token) {\n  //     try {\n  //       const response = await axios.get('http://localhost:5000/api/auth/user', {\n  //         headers: {\n  //           Authorization: `Bearer ${localStorage.getItem('token')}`\n  //         }\n  //       });\n  //       setHostelName(response.data.hostelName);\n  //       console.log('Hostel Name:', response.hostelName);\n  //       console.log('Category:', response.category);\n  //     } catch (error) {\n  //       console.error('Error fetching hostelName:', error);\n  //     } \n  //   } else {\n  //     console.log('No token found')\n  //   }\n  // };\n\n  // // Effect to check authentication on page load\n  // useEffect(() => {\n  //   const authenticated = checkAuthentication();\n  //   setIsAuthenticated(authenticated);\n  //   if (authenticated) {\n  //     console.log('Authenticated:', authenticated);\n  //     fetchHostelName();  // Fetch hostelName if the user is authenticated\n  //   }\n  // }, [isAuthenticated]);\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(AuthProvider, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Route","Routes","Login","AuthProvider","jsxDEV","_jsxDEV","App","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Out/Outpass-Management-System/my-outpass/src/App.js"],"sourcesContent":["import React from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\n// import axios from 'axios'; \r\nimport Login from './Components/Login';\r\n// import StudentDashboard from './Components/StudentDashboard';\r\n// import WardenDashboard from './Components/WardenDashboard';\r\nimport { AuthProvider } from './contexts/AuthContext';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n\r\nfunction App() {\r\n  // const Navigate = useNavigate();\r\n\r\n  // const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  // // const [hostelName, setHostelName] = useState(null);\r\n \r\n  // // Function to check if the user is authenticated\r\n  // const checkAuthentication = () => {\r\n  //   const token = localStorage.getItem('token');\r\n  //   return token !== null;\r\n  // };\r\n\r\n  // // Function to fetch the user's hostelName once they are logged in\r\n  // const fetchHostelName = async () => {\r\n  // //  // Fetch the user's hostelName using the token\r\n  //   const token = localStorage.getItem('token');\r\n  //   console.log('Token:', token);\r\n \r\n  //   if (token) {\r\n  //     try {\r\n  //       const response = await axios.get('http://localhost:5000/api/auth/user', {\r\n  //         headers: {\r\n  //           Authorization: `Bearer ${localStorage.getItem('token')}`\r\n  //         }\r\n  //       });\r\n  //       setHostelName(response.data.hostelName);\r\n  //       console.log('Hostel Name:', response.hostelName);\r\n  //       console.log('Category:', response.category);\r\n  //     } catch (error) {\r\n  //       console.error('Error fetching hostelName:', error);\r\n  //     } \r\n  //   } else {\r\n  //     console.log('No token found')\r\n  //   }\r\n  // };\r\n  \r\n  // // Effect to check authentication on page load\r\n  // useEffect(() => {\r\n  //   const authenticated = checkAuthentication();\r\n  //   setIsAuthenticated(authenticated);\r\n  //   if (authenticated) {\r\n  //     console.log('Authenticated:', authenticated);\r\n  //     fetchHostelName();  // Fetch hostelName if the user is authenticated\r\n  //   }\r\n  // }, [isAuthenticated]);\r\n \r\n  return (\r\n    <Router>\r\n    <AuthProvider>\r\n  \r\n      <Routes>\r\n        <Route path=\"*\" element={<Login />} />\r\n          {/* <>\r\n            <Route path=\"/student-dashboard\" element={<StudentDashboard />} />\r\n            <Route path=\"/warden-dashboard\" element={<WardenDashboard hostel={hostelName} />} />\r\n          </> */}\r\n\r\n{/* <Route path=\"/login\" element={<Login />} />\r\n          <Route path=\"/student-dashboard\" element={<StudentDashboard />} />\r\n          <Route path=\"/warden-dashboard\" element={<WardenDashboard />} />\r\n          <Route path=\"*\" element={<Navigate to=\"/login\" />} /> */}\r\n        \r\n      </Routes>\r\n    </AuthProvider>\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AACzE;AACA,OAAOC,KAAK,MAAM,oBAAoB;AACtC;AACA;AACA,SAASC,YAAY,QAAQ,wBAAwB;AACrD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,SAASC,GAAGA,CAAA,EAAG;EACb;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACED,OAAA,CAACN,MAAM;IAAAQ,QAAA,eACPF,OAAA,CAACF,YAAY;MAAAI,QAAA,eAEXF,OAAA,CAACJ,MAAM;QAAAM,QAAA,eACLF,OAAA,CAACL,KAAK;UAACQ,IAAI,EAAC,GAAG;UAACC,OAAO,eAAEJ,OAAA,CAACH,KAAK;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWhC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAGb;AAACC,EAAA,GAnEQR,GAAG;AAsEZ,eAAeA,GAAG;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}