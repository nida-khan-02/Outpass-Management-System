{"ast":null,"code":"'use strict';\n\n/**\n * Dependencies\n */\nconst assert = require('assert');\nconst util = require('util');\nconst utils = require('./utils');\nconst debug = require('debug')('mquery');\n\n/**\n * Query constructor used for building queries.\n *\n * #### Example:\n *\n *     var query = new Query({ name: 'mquery' });\n *     query.setOptions({ collection: moduleCollection })\n *     await query.where('age').gte(21).exec();\n *\n * @param {Object} [criteria] criteria for the query OR the collection instance to use\n * @param {Object} [options]\n * @api public\n */\n\nfunction Query(criteria, options) {\n  if (!(this instanceof Query)) return new Query(criteria, options);\n  const proto = this.constructor.prototype;\n  this.op = proto.op || undefined;\n  this.options = Object.assign({}, proto.options);\n  this._conditions = proto._conditions ? utils.clone(proto._conditions) : {};\n  this._fields = proto._fields ? utils.clone(proto._fields) : undefined;\n  this._updateDoc = proto._updateDoc ? utils.clone(proto._updateDoc) : undefined;\n  this._path = proto._path || undefined;\n  this._distinctDoc = proto._distinctDoc || undefined;\n  this._collection = proto._collection || undefined;\n  this._traceFunction = proto._traceFunction || undefined;\n  if (options) {\n    this.setOptions(options);\n  }\n  if (criteria) {\n    this.find(criteria);\n  }\n}\n\n/**\n * This is a parameter that the user can set which determines if mquery\n * uses $within or $geoWithin for queries. It defaults to true which\n * means $geoWithin will be used. If using MongoDB < 2.4 you should\n * set this to false.\n *\n * @api public\n * @property use$geoWithin\n */\n\nlet $withinCmd = '$geoWithin';\nObject.defineProperty(Query, 'use$geoWithin', {\n  get: function () {\n    return $withinCmd == '$geoWithin';\n  },\n  set: function (v) {\n    if (true === v) {\n      // mongodb >= 2.4\n      $withinCmd = '$geoWithin';\n    } else {\n      $withinCmd = '$within';\n    }\n  }\n});\n\n/**\n * Converts this query to a constructor function with all arguments and options retained.\n *\n * #### Example:\n *\n *     // Create a query that will read documents with a \"video\" category from\n *     // `aCollection` on the primary node in the replica-set unless it is down,\n *     // in which case we'll read from a secondary node.\n *     var query = mquery({ category: 'video' })\n *     query.setOptions({ collection: aCollection, read: 'primaryPreferred' });\n *\n *     // create a constructor based off these settings\n *     var Video = query.toConstructor();\n *\n *     // Video is now a subclass of mquery() and works the same way but with the\n *     // default query parameters and options set.\n *\n *     // run a query with the previous settings but filter for movies with names\n *     // that start with \"Life\".\n *     Video().where({ name: /^Life/ }).exec(cb);\n *\n * @return {Query} new Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  function CustomQuery(criteria, options) {\n    if (!(this instanceof CustomQuery)) return new CustomQuery(criteria, options);\n    Query.call(this, criteria, options);\n  }\n  utils.inherits(CustomQuery, Query);\n\n  // set inherited defaults\n  const p = CustomQuery.prototype;\n  p.options = {};\n  p.setOptions(this.options);\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._updateDoc = utils.clone(this._updateDoc);\n  p._path = this._path;\n  p._distinctDoc = this._distinctDoc;\n  p._collection = this._collection;\n  p._traceFunction = this._traceFunction;\n  return CustomQuery;\n};\n\n/**\n * Sets query options.\n *\n * #### Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n * - collection the collection to query against\n *\n * _* denotes a query helper method is also available_\n *\n * @param {Object} options\n * @api public\n */\n\nQuery.prototype.setOptions = function (options) {\n  if (!(options && utils.isObject(options))) return this;\n\n  // set arbitrary options\n  const methods = utils.keys(options);\n  let method;\n  for (let i = 0; i < methods.length; ++i) {\n    method = methods[i];\n\n    // use methods if exist (safer option manipulation)\n    if ('function' == typeof this[method]) {\n      const args = Array.isArray(options[method]) ? options[method] : [options[method]];\n      this[method].apply(this, args);\n    } else {\n      this.options[method] = options[method];\n    }\n  }\n  return this;\n};\n\n/**\n * Sets this Querys collection.\n *\n * @param {Collection} coll\n * @return {Query} this\n */\n\nQuery.prototype.collection = function collection(coll) {\n  this._collection = new Query.Collection(coll);\n  return this;\n};\n\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * #### Example:\n *\n *     query.find().collation({ locale: \"en_US\", strength: 1 })\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\nQuery.prototype.collation = function (value) {\n  this.options.collation = value;\n  return this;\n};\n\n/**\n * Specifies a `$where` condition\n *\n * Use `$where` when you need to select documents using a JavaScript expression.\n *\n * #### Example:\n *\n *     query.$where('this.comments.length > 10 || this.name.length > 5')\n *\n *     query.$where(function () {\n *       return this.comments.length > 10 || this.name.length > 5;\n *     })\n *\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\nQuery.prototype.$where = function (js) {\n  this._conditions.$where = js;\n  return this;\n};\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * #### Example:\n *\n *     // instead of writing:\n *     await User.find({age: {$gte: 21, $lte: 65}});\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     await User\n *       .where('age').gte(21).lte(65)\n *       .where('name', /^vonderful/i)\n *       .where('friends').slice(10)\n *       .exec()\n *\n * @param {String} [path]\n * @param {Object} [val]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.where = function () {\n  if (!arguments.length) return this;\n  if (!this.op) this.op = 'find';\n  const type = typeof arguments[0];\n  if ('string' == type) {\n    this._path = arguments[0];\n    if (2 === arguments.length) {\n      this._conditions[this._path] = arguments[1];\n    }\n    return this;\n  }\n  if ('object' == type && !Array.isArray(arguments[0])) {\n    return this.merge(arguments[0]);\n  }\n  throw new TypeError('path must be a string or object');\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * #### Example:\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.equals = function equals(val) {\n  this._ensurePath('equals');\n  const path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n * This is alias of `equals`\n *\n * #### Example:\n *\n *     User.where('age').eq(49);\n *\n *     // is the same as\n *\n *     User.shere('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.eq = function eq(val) {\n  this._ensurePath('eq');\n  const path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * #### Example:\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.or = function or(array) {\n  const or = this._conditions.$or || (this._conditions.$or = []);\n  if (!Array.isArray(array)) array = [array];\n  or.push.apply(or, array);\n  return this;\n};\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * #### Example:\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.nor = function nor(array) {\n  const nor = this._conditions.$nor || (this._conditions.$nor = []);\n  if (!Array.isArray(array)) array = [array];\n  nor.push.apply(nor, array);\n  return this;\n};\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * #### Example:\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.and = function and(array) {\n  const and = this._conditions.$and || (this._conditions.$and = []);\n  if (!Array.isArray(array)) array = [array];\n  and.push.apply(and, array);\n  return this;\n};\n\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * #### Example:\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/*!\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\n'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function ($conditional) {\n  Query.prototype[$conditional] = function () {\n    let path, val;\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n    const conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ? this._conditions[path] : this._conditions[path] = {};\n    conds['$' + $conditional] = val;\n    return this;\n  };\n});\n\n/**\n * Specifies a `$mod` condition\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.mod = function () {\n  let val, path;\n  if (1 === arguments.length) {\n    this._ensurePath('mod');\n    val = arguments[0];\n    path = this._path;\n  } else if (2 === arguments.length && !Array.isArray(arguments[1])) {\n    this._ensurePath('mod');\n    val = [arguments[0], arguments[1]];\n    path = this._path;\n  } else if (3 === arguments.length) {\n    val = [arguments[1], arguments[2]];\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n\n/**\n * Specifies an `$exists` condition\n *\n * #### Example:\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.exists = function () {\n  let path, val;\n  if (0 === arguments.length) {\n    this._ensurePath('exists');\n    path = this._path;\n    val = true;\n  } else if (1 === arguments.length) {\n    if ('boolean' === typeof arguments[0]) {\n      this._ensurePath('exists');\n      path = this._path;\n      val = arguments[0];\n    } else {\n      path = arguments[0];\n      val = true;\n    }\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$exists = val;\n  return this;\n};\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * #### Example:\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.elemMatch = function () {\n  if (null == arguments[0]) throw new TypeError('Invalid argument');\n  let fn, path, criteria;\n  if ('function' === typeof arguments[0]) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    fn = arguments[0];\n  } else if (utils.isObject(arguments[0])) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    criteria = arguments[0];\n  } else if ('function' === typeof arguments[1]) {\n    path = arguments[0];\n    fn = arguments[1];\n  } else if (arguments[1] && utils.isObject(arguments[1])) {\n    path = arguments[0];\n    criteria = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  if (fn) {\n    criteria = new Query();\n    fn(criteria);\n    criteria = criteria._conditions;\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$elemMatch = criteria;\n  return this;\n};\n\n// Spatial queries\n\n/**\n * Sugar for geo-spatial queries.\n *\n * #### Example:\n *\n *     query.within().box()\n *     query.within().circle()\n *     query.within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * #### Note:\n *\n * Must be used after `where()`.\n *\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.within = function within() {\n  // opinionated, must be used after where\n  this._ensurePath('within');\n  this._geoComparison = $withinCmd;\n  if (0 === arguments.length) {\n    return this;\n  }\n  if (2 === arguments.length) {\n    return this.box.apply(this, arguments);\n  } else if (2 < arguments.length) {\n    return this.polygon.apply(this, arguments);\n  }\n  const area = arguments[0];\n  if (!area) throw new TypeError('Invalid argument');\n  if (area.center) return this.circle(area);\n  if (area.box) return this.box.apply(this, area.box);\n  if (area.polygon) return this.polygon.apply(this, area.polygon);\n  if (area.type && area.coordinates) return this.geometry(area);\n  throw new TypeError('Invalid argument');\n};\n\n/**\n * Specifies a $box condition\n *\n * #### Example:\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box('loc', lowerLeft, upperRight )\n *\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see Query#within #query_Query-within\n * @param {String} path\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.box = function () {\n  let path, box;\n  if (3 === arguments.length) {\n    // box('loc', [], [])\n    path = arguments[0];\n    box = [arguments[1], arguments[2]];\n  } else if (2 === arguments.length) {\n    // box([], [])\n    this._ensurePath('box');\n    path = this._path;\n    box = [arguments[0], arguments[1]];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = {\n    $box: box\n  };\n  return this;\n};\n\n/**\n * Specifies a $polygon condition\n *\n * #### Example:\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @param {String|Array} [path]\n * @param {Array|Object} [val]\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.polygon = function () {\n  let val, path;\n  if ('string' == typeof arguments[0]) {\n    // polygon('loc', [],[],[])\n    val = Array.from(arguments);\n    path = val.shift();\n  } else {\n    // polygon([],[],[])\n    this._ensurePath('polygon');\n    path = this._path;\n    val = Array.from(arguments);\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = {\n    $polygon: val\n  };\n  return this;\n};\n\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * #### Example:\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n *     // for spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.circle = function () {\n  let path, val;\n  if (1 === arguments.length) {\n    this._ensurePath('circle');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  if (!('radius' in val && val.center)) throw new Error('center and radius are required');\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  const type = val.spherical ? '$centerSphere' : '$center';\n  const wKey = this._geoComparison || $withinCmd;\n  conds[wKey] = {};\n  conds[wKey][type] = [val.center, val.radius];\n  if ('unique' in val) conds[wKey].$uniqueDocs = !!val.unique;\n  return this;\n};\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * #### Example:\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *     query.near({ center: { type: 'Point', coordinates: [..] }})\n *     query.near().geometry({ type: 'Point', coordinates: [..] })\n *\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.near = function near() {\n  let path, val;\n  this._geoComparison = '$near';\n  if (0 === arguments.length) {\n    return this;\n  } else if (1 === arguments.length) {\n    this._ensurePath('near');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  if (!val.center) {\n    throw new Error('center is required');\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  const type = val.spherical ? '$nearSphere' : '$near';\n\n  // center could be a GeoJSON object or an Array\n  if (Array.isArray(val.center)) {\n    conds[type] = val.center;\n    const radius = 'maxDistance' in val ? val.maxDistance : null;\n    if (null != radius) {\n      conds.$maxDistance = radius;\n    }\n    if (null != val.minDistance) {\n      conds.$minDistance = val.minDistance;\n    }\n  } else {\n    // GeoJSON?\n    if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {\n      throw new Error(util.format('Invalid GeoJSON specified for %s', type));\n    }\n    conds[type] = {\n      $geometry: val.center\n    };\n\n    // MongoDB 2.6 insists on maxDistance being in $near / $nearSphere\n    if ('maxDistance' in val) {\n      conds[type]['$maxDistance'] = val.maxDistance;\n    }\n    if ('minDistance' in val) {\n      conds[type]['$minDistance'] = val.minDistance;\n    }\n  }\n  return this;\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * #### Example:\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * @param {Object} [arg]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.intersects = function intersects() {\n  // opinionated, must be used after where\n  this._ensurePath('intersects');\n  this._geoComparison = '$geoIntersects';\n  if (0 === arguments.length) {\n    return this;\n  }\n  const area = arguments[0];\n  if (null != area && area.type && area.coordinates) return this.geometry(area);\n  throw new TypeError('Invalid argument');\n};\n\n/**\n * Specifies a `$geometry` condition\n *\n * #### Example:\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * #### Note:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * The most recent path passed to `where()` is used.\n *\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @api public\n */\n\nQuery.prototype.geometry = function geometry() {\n  if (!('$within' == this._geoComparison || '$geoWithin' == this._geoComparison || '$near' == this._geoComparison || '$geoIntersects' == this._geoComparison)) {\n    throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');\n  }\n  let val, path;\n  if (1 === arguments.length) {\n    this._ensurePath('geometry');\n    path = this._path;\n    val = arguments[0];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  if (!(val.type && Array.isArray(val.coordinates))) {\n    throw new TypeError('Invalid argument');\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison] = {\n    $geometry: val\n  };\n  return this;\n};\n\n// end spatial\n\n/**\n * Specifies which document fields to include or exclude\n *\n * #### String syntax\n *\n * When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\n *\n * #### Example:\n *\n *     // include a and b, exclude c\n *     query.select('a b -c');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({a: 1, b: 1, c: 0});\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\nQuery.prototype.select = function select() {\n  let arg = arguments[0];\n  if (!arg) return this;\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n  this._validate('select');\n  const fields = this._fields || (this._fields = {});\n  const type = typeof arg;\n  let i, len;\n  if (('string' == type || utils.isArgumentsObject(arg)) && 'number' == typeof arg.length || Array.isArray(arg)) {\n    if ('string' == type) arg = arg.split(/\\s+/);\n    for (i = 0, len = arg.length; i < len; ++i) {\n      let field = arg[i];\n      if (!field) continue;\n      const include = '-' == field[0] ? 0 : 1;\n      if (include === 0) field = field.substring(1);\n      fields[field] = include;\n    }\n    return this;\n  }\n  if (utils.isObject(arg)) {\n    const keys = utils.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      fields[keys[i]] = arg[keys[i]];\n    }\n    return this;\n  }\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n\n/**\n * Specifies a $slice condition for a `path`\n *\n * #### Example:\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @api public\n */\n\nQuery.prototype.slice = function () {\n  if (0 === arguments.length) return this;\n  this._validate('slice');\n  let path, val;\n  if (1 === arguments.length) {\n    const arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const keys = Object.keys(arg);\n      const numKeys = keys.length;\n      for (let i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = [arguments[0], arguments[1]];\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (3 === arguments.length) {\n    path = arguments[0];\n    val = [arguments[1], arguments[2]];\n  }\n  const myFields = this._fields || (this._fields = {});\n  myFields[path] = {\n    $slice: val\n  };\n  return this;\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * #### Example:\n *\n *     // these are equivalent\n *     query.sort({ field: 'asc', test: -1 });\n *     query.sort('field -test');\n *     query.sort([['field', 1], ['test', -1]]);\n *\n * #### Note:\n *\n *  - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).\n *  - Cannot be used with `distinct()`\n *\n * @param {Object|String|Array} arg\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.sort = function (arg) {\n  if (!arg) return this;\n  let i, len, field;\n  this._validate('sort');\n  const type = typeof arg;\n\n  // .sort([['field', 1], ['test', -1]])\n  if (Array.isArray(arg)) {\n    len = arg.length;\n    for (i = 0; i < arg.length; ++i) {\n      if (!Array.isArray(arg[i])) {\n        throw new Error('Invalid sort() argument, must be array of arrays');\n      }\n      _pushArr(this.options, arg[i][0], arg[i][1]);\n    }\n    return this;\n  }\n\n  // .sort('field -test')\n  if (1 === arguments.length && 'string' == type) {\n    arg = arg.split(/\\s+/);\n    len = arg.length;\n    for (i = 0; i < len; ++i) {\n      field = arg[i];\n      if (!field) continue;\n      const ascend = '-' == field[0] ? -1 : 1;\n      if (ascend === -1) field = field.substring(1);\n      push(this.options, field, ascend);\n    }\n    return this;\n  }\n\n  // .sort({ field: 1, test: -1 })\n  if (utils.isObject(arg)) {\n    const keys = utils.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      field = keys[i];\n      push(this.options, field, arg[field]);\n    }\n    return this;\n  }\n  if (typeof Map !== 'undefined' && arg instanceof Map) {\n    _pushMap(this.options, arg);\n    return this;\n  }\n  throw new TypeError('Invalid sort() argument. Must be a string, object, or array.');\n};\n\n/*!\n * @ignore\n */\n\nconst _validSortValue = {\n  1: 1,\n  '-1': -1,\n  asc: 1,\n  ascending: 1,\n  desc: -1,\n  descending: -1\n};\nfunction push(opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' + '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' + '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n  let s;\n  if (value && value.$meta) {\n    s = opts.sort || (opts.sort = {});\n    s[field] = {\n      $meta: value.$meta\n    };\n    return;\n  }\n  s = opts.sort || (opts.sort = {});\n  let val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: { ' + field + ': ' + value + ' }');\n  s[field] = val;\n}\nfunction _pushArr(opts, field, value) {\n  opts.sort = opts.sort || [];\n  if (!Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' + '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' + '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n  let val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: [ ' + field + ', ' + value + ' ]');\n  opts.sort.push([field, val]);\n}\nfunction _pushMap(opts, map) {\n  opts.sort = opts.sort || new Map();\n  if (!(opts.sort instanceof Map)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or ' + 'object or map consistently');\n  }\n  map.forEach(function (value, key) {\n    let val = String(value || 1).toLowerCase();\n    val = _validSortValue[val];\n    if (!val) throw new TypeError('Invalid sort value: < ' + key + ': ' + value + ' >');\n    opts.sort.set(key, val);\n  });\n}\n\n/**\n * Specifies the limit option.\n *\n * #### Example:\n *\n *     query.limit(20)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the skip option.\n *\n * #### Example:\n *\n *     query.skip(100).limit(20)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the batchSize option.\n *\n * #### Example:\n *\n *     query.batchSize(100)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the `comment` option.\n *\n * #### Example:\n *\n *     query.comment('login query')\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\n * @api public\n */\n\n/*!\n * limit, skip, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\n\n['limit', 'skip', 'batchSize', 'comment'].forEach(function (method) {\n  Query.prototype[method] = function (v) {\n    this._validate(method);\n    this.options[method] = v;\n    return this;\n  };\n});\n\n/**\n * Specifies the maxTimeMS option.\n *\n * #### Example:\n *\n *     query.maxTime(100)\n *     query.maxTimeMS(100)\n *\n * @method maxTime\n * @memberOf Query\n * @param {Number} ms\n * @see mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS\n * @api public\n */\n\nQuery.prototype.maxTime = Query.prototype.maxTimeMS = function (ms) {\n  this._validate('maxTime');\n  this.options.maxTimeMS = ms;\n  return this;\n};\n\n/**\n * Sets query hints.\n *\n * #### Example:\n *\n *     query.hint({ indexA: 1, indexB: -1});\n *     query.hint('indexA_1_indexB_1');\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|string} val a hint object or the index name\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\n * @api public\n */\n\nQuery.prototype.hint = function () {\n  if (0 === arguments.length) return this;\n  this._validate('hint');\n  const arg = arguments[0];\n  if (utils.isObject(arg)) {\n    const hint = this.options.hint || (this.options.hint = {});\n\n    // must keep object keys in order so don't use Object.keys()\n    for (const k in arg) {\n      hint[k] = arg[k];\n    }\n    return this;\n  }\n  if (typeof arg === 'string') {\n    this.options.hint = arg;\n    return this;\n  }\n  throw new TypeError('Invalid hint. ' + arg);\n};\n\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `j` value if it is specified in writeConcern options\n *\n * #### Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.j = function j(val) {\n  this.options.j = val;\n  return this;\n};\n\n/**\n * Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.\n *\n * #### Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see read()\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.slaveOk = function (v) {\n  this.options.slaveOk = arguments.length ? !!v : true;\n  return this;\n};\n\n/**\n * Sets the readPreference option for the query.\n *\n * #### Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // you can also use mongodb.ReadPreference class to also specify tags\n *     new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))\n *\n *     new Query().setReadPreference('primary') // alias of .read()\n *\n * #### Preferences:\n *\n *     primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = Query.prototype.setReadPreference = function (pref) {\n  if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {\n    console.error('Deprecation warning: \\'tags\\' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.');\n    Query.prototype.read.deprecationWarningIssued = true;\n  }\n  this.options.readPreference = utils.readPref(pref);\n  return this;\n};\n\n/**\n * Sets the readConcern option for the query.\n *\n * #### Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *     new Query().r('s') // r is alias of readConcern\n *\n *\n * #### Read Concern Level:\n *\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n *\n * Aliases\n *\n *     l   local\n *     a   available\n *     m   majority\n *     lz  linearizable\n *     s   snapshot\n *\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\n *\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.readConcern = Query.prototype.r = function (level) {\n  this.options.readConcern = utils.readConcern(level);\n  return this;\n};\n\n/**\n * Sets tailable option.\n *\n * #### Example:\n *\n *     query.tailable() <== true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} v defaults to true\n * @see mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors\n * @api public\n */\n\nQuery.prototype.tailable = function () {\n  this._validate('tailable');\n  this.options.tailable = arguments.length ? !!arguments[0] : true;\n  return this;\n};\n\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `w` value if it is specified in writeConcern options\n *\n * #### Example:\n *\n *     mquery().writeConcern(0)\n *     mquery().writeConcern(1)\n *     mquery().writeConcern({ w: 1, j: true, wtimeout: 2000 })\n *     mquery().writeConcern('majority')\n *     mquery().writeConcern('m') // same as majority\n *     mquery().writeConcern('tagSetName') // if the tag set is 'm', use .writeConcern({ w: 'm' }) instead\n *     mquery().w(1) // w is alias of writeConcern\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {String|number|object} concern 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.writeConcern = Query.prototype.w = function writeConcern(concern) {\n  if ('object' === typeof concern) {\n    if ('undefined' !== typeof concern.j) this.options.j = concern.j;\n    if ('undefined' !== typeof concern.w) this.options.w = concern.w;\n    if ('undefined' !== typeof concern.wtimeout) this.options.wtimeout = concern.wtimeout;\n  } else {\n    this.options.w = 'm' === concern ? 'majority' : concern;\n  }\n  return this;\n};\n\n/**\n * Specifies a time limit, in milliseconds, for the write concern.\n * If `ms > 1`, it is maximum amount of time to wait for this write\n * to propagate through the replica set before this operation fails.\n * The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to `wtimeout` value if it is specified in writeConcern\n *\n * #### Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000)\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.wtimeout = Query.prototype.wTimeout = function wtimeout(ms) {\n  this.options.wtimeout = ms;\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function (source) {\n  if (!source) return this;\n  if (!Query.canMerge(source)) throw new TypeError('Invalid argument. Expected instanceof mquery or plain object');\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions);\n    }\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields);\n    }\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options);\n    }\n    if (source._updateDoc) {\n      this._updateDoc || (this._updateDoc = {});\n      utils.mergeClone(this._updateDoc, source._updateDoc);\n    }\n    if (source._distinctDoc) {\n      this._distinctDoc = source._distinctDoc;\n    }\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source);\n  return this;\n};\n\n/**\n * Finds documents.\n *\n * #### Example:\n *\n *     query.find()\n *     await query.find()\n *     await query.find({ name: 'Burning Lights' })\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function (criteria) {\n  this.op = 'find';\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  return this;\n};\n\n/**\n * Executes a `find` Query\n * @returns the result\n */\nQuery.prototype._find = async function _find() {\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n  debug('_find', this._collection.collectionName, conds, options);\n  return this._collection.find(conds, options);\n};\n\n/**\n * Returns the query cursor\n *\n * #### Examples:\n *\n *     query.find().cursor();\n *     query.cursor({ name: 'Burning Lights' });\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Object} cursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor(criteria) {\n  if (this.op) {\n    if (this.op !== 'find') {\n      throw new TypeError('.cursor only support .find method');\n    }\n  } else {\n    this.find(criteria);\n  }\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n  debug('findCursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n};\n\n/**\n * Executes the query as a findOne() operation.\n *\n * #### Example:\n *\n *     query.findOne().where('name', /^Burning/);\n *\n *     query.findOne({ name: /^Burning/ })\n *\n *     await query.findOne({ name: /^Burning/ }); // executes\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOne = function (criteria) {\n  this.op = 'findOne';\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  return this;\n};\n\n/**\n * Executes a `findOne` Query\n * @returns the results\n */\nQuery.prototype._findOne = async function _findOne() {\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n  debug('findOne', this._collection.collectionName, conds, options);\n  return this._collection.findOne(conds, options);\n};\n\n/**\n * Exectues the query as a count() operation.\n *\n * #### Example:\n *\n *     query.count().where('color', 'black').exec();\n *\n *     query.count({ color: 'black' })\n *\n *     await query.count({ color: 'black' });\n *\n *     const doc = await query.where('color', 'black').count();\n *     console.log('there are %d kittens', count);\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count\n * @api public\n */\n\nQuery.prototype.count = function (criteria) {\n  this.op = 'count';\n  this._validate();\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  return this;\n};\n\n/**\n * Executes a `count` Query\n * @returns the results\n */\nQuery.prototype._count = async function _count() {\n  const conds = this._conditions,\n    options = this._optionsForExec();\n  debug('count', this._collection.collectionName, conds, options);\n  return this._collection.count(conds, options);\n};\n\n/**\n * Declares or executes a distinct() operation.\n *\n * #### Example:\n *\n *     await distinct(criteria, field)\n *     distinct(criteria, field)\n *     await distinct(field)\n *     distinct(field)\n *     await distinct()\n *     distinct()\n *\n * @param {Object|Query} [criteria]\n * @param {String} [field]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct\n * @api public\n */\n\nQuery.prototype.distinct = function (criteria, field) {\n  this.op = 'distinct';\n  this._validate();\n  if (!field && typeof criteria === 'string') {\n    field = criteria;\n    criteria = undefined;\n  }\n  if ('string' == typeof field) {\n    this._distinctDoc = field;\n  }\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  return this;\n};\n\n/**\n * Executes a `distinct` Query\n * @returns the results\n */\nQuery.prototype._distinct = async function _distinct() {\n  if (!this._distinctDoc) {\n    throw new Error('No value for `distinct` has been declared');\n  }\n  const conds = this._conditions,\n    options = this._optionsForExec();\n  debug('distinct', this._collection.collectionName, conds, options);\n  return this._collection.distinct(this._distinctDoc, conds, options);\n};\n\n/**\n * Declare and/or execute this query as an `updateMany()` operation. This function will update _all_ documents that match\n * `criteria`, rather than just the first one.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * #### Example:\n *\n *     // Update every document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.updateMany = function updateMany(criteria, doc, options) {\n  if (arguments.length === 1) {\n    doc = criteria;\n    criteria = options = undefined;\n  }\n  return _update(this, 'updateMany', criteria, doc, options);\n};\n\n/**\n * Executes a `updateMany` Query\n * @returns the results\n */\nQuery.prototype._updateMany = async function () {\n  return _updateExec(this, 'updateMany');\n};\n\n/**\n * Declare and/or execute this query as an `updateOne()` operation. This function will _always_ update just one document,\n * regardless of the `multi` option.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * #### Example:\n *\n *     // Update the first document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.updateOne = function updateOne(criteria, doc, options) {\n  if (arguments.length === 1) {\n    doc = criteria;\n    criteria = options = undefined;\n  }\n  return _update(this, 'updateOne', criteria, doc, options);\n};\n\n/**\n * Executes a `updateOne` Query\n * @returns the results\n */\nQuery.prototype._updateOne = async function () {\n  return _updateExec(this, 'updateOne');\n};\n\n/**\n * Declare and/or execute this query as an `replaceOne()` operation. Similar\n * to `updateOne()`, except `replaceOne()` is not allowed to use atomic\n * modifiers (`$set`, `$push`, etc.). Calling `replaceOne()` will always\n * replace the existing doc.\n *\n * #### Example:\n *\n *     // Replace the document with `_id` 1 with `{ _id: 1, year: 2017 }`\n *     mquery().replaceOne({ _id: 1 }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.replaceOne = function replaceOne(criteria, doc, options) {\n  if (arguments.length === 1) {\n    doc = criteria;\n    criteria = options = undefined;\n  }\n  this.setOptions({\n    overwrite: true\n  });\n  return _update(this, 'replaceOne', criteria, doc, options);\n};\n\n/**\n * Executes a `replaceOne` Query\n * @returns the results\n */\nQuery.prototype._replaceOne = async function () {\n  return _updateExec(this, 'replaceOne');\n};\n\n/*!\n * Internal helper for updateMany, updateOne\n */\n\nfunction _update(query, op, criteria, doc, options) {\n  query.op = op;\n  if (Query.canMerge(criteria)) {\n    query.merge(criteria);\n  }\n  if (doc) {\n    query._mergeUpdate(doc);\n  }\n  if (utils.isObject(options)) {\n    // { overwrite: true }\n    query.setOptions(options);\n  }\n  return query;\n}\n\n/**\n * Helper for de-duplicating \"update*\" functions\n * @param {Query} query The Query Object (replacement for \"this\")\n * @param {String} op The Operation to be done\n * @returns the results\n */\nasync function _updateExec(query, op) {\n  const options = query._optionsForExec();\n  const criteria = query._conditions;\n  const doc = query._updateForExec();\n  debug('update', query._collection.collectionName, criteria, doc, options);\n  return query._collection[op](criteria, doc, options);\n}\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation.\n *\n * #### Example:\n *\n *     await mquery(collection).deleteOne({ artist: 'Anne Murray' })\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.deleteOne = function (criteria) {\n  this.op = 'deleteOne';\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  return this;\n};\n\n/**\n * Executes a `deleteOne` Query\n * @returns the results\n */\nQuery.prototype._deleteOne = async function () {\n  const options = this._optionsForExec();\n  delete options.justOne;\n  const conds = this._conditions;\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  return this._collection.deleteOne(conds, options);\n};\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Always deletes\n * _every_ document that matches `criteria`.\n *\n * #### Example:\n *\n *     await mquery(collection).deleteMany({ artist: 'Anne Murray' })\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.deleteMany = function (criteria) {\n  this.op = 'deleteMany';\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  return this;\n};\n\n/**\n * Executes a `deleteMany` Query\n * @returns the results\n */\nQuery.prototype._deleteMany = async function () {\n  const options = this._optionsForExec();\n  delete options.justOne;\n  const conds = this._conditions;\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  return this._collection.deleteMany(conds, options);\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any).\n *\n * #### Available options\n *\n * - `new`: bool - true to return the modified document rather than the original. defaults to true\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * #### Examples:\n *\n *     await query.findOneAndUpdate(conditions, update, options) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     await query.findOneAndUpdate(conditions, update) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     await query.findOneAndUpdate(update)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     await query.findOneAndUpdate()                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function (criteria, doc, options) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n  if (arguments.length === 1) {\n    doc = criteria;\n    criteria = options = undefined;\n  }\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n  options && this.setOptions(options);\n  return this;\n};\n\n/**\n * Executes a `findOneAndUpdate` Query\n * @returns the results\n */\nQuery.prototype._findOneAndUpdate = async function () {\n  const conds = this._conditions;\n  const update = this._updateForExec();\n  const options = this._optionsForExec();\n  return this._collection.findOneAndUpdate(conds, update, options);\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, returning the found document (if any).\n *\n * #### Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * #### Examples:\n *\n *     await A.where().findOneAndRemove(conditions, options) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     await A.where().findOneAndRemove(conditions) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     await A.where().findOneAndRemove()   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *     A.where().findOneAndDelete()           // alias of .findOneAndRemove()\n *\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = Query.prototype.findOneAndDelete = function (conditions, options) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n\n  // apply conditions\n  if (Query.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  // apply options\n  options && this.setOptions(options);\n  return this;\n};\n\n/**\n * Executes a `findOneAndRemove` Query\n * @returns the results\n */\nQuery.prototype._findOneAndRemove = async function () {\n  const options = this._optionsForExec();\n  const conds = this._conditions;\n  return this._collection.findOneAndDelete(conds, options);\n};\n\n/**\n * Add trace function that gets called when the query is executed.\n * The function will be called with (method, queryInfo, query) and\n * should return a callback function which will be called\n * with (err, result, millis) when the query is complete.\n *\n * queryInfo is an object containing: {\n *   collectionName: <name of the collection>,\n *   conditions: <query criteria>,\n *   options: <comment, fields, readPreference, etc>,\n *   doc: [document to update, if applicable]\n * }\n *\n * NOTE: Does not trace stream queries.\n *\n * @param {Function} traceFunction\n * @return {Query} this\n * @api public\n */\nQuery.prototype.setTraceFunction = function (traceFunction) {\n  this._traceFunction = traceFunction;\n  return this;\n};\n\n/**\n * Executes the query\n *\n * #### Examples:\n *\n *     query.exec();\n *     await query.exec();\n *     query.exec('update');\n *     await query.exec('find');\n *\n * @param {String|Function} [operation]\n * @api public\n */\n\nQuery.prototype.exec = async function exec(op) {\n  if (typeof op === 'string') {\n    this.op = op;\n  }\n  assert.ok(this.op, 'Missing query type: (find, etc)');\n  const fnName = '_' + this.op;\n\n  // better error, because default would list it as \"this[fnName] is not a function\"\n  if (typeof this[fnName] !== 'function') {\n    throw new TypeError(`this[${fnName}] is not a function`);\n  }\n  return this[fnName]();\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = async function (res, rej) {\n  return this.exec().then(res, rej);\n};\n\n/**\n * Returns a cursor for the given `find` query.\n *\n * @throws Error if operation is not a find\n * @returns {Cursor} MongoDB driver cursor\n */\n\nQuery.prototype.cursor = function () {\n  if ('find' != this.op) throw new Error('cursor() is only available for find');\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n  debug('cursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selected = function selected() {\n  return !!(this._fields && Object.keys(this._fields).length > 0);\n};\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *     query.selectedExlusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  if (!this._fields) return false;\n  const keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (0 === this._fields[key]) return false;\n    if (this._fields[key] && typeof this._fields[key] === 'object' && this._fields[key].$meta) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExlusively() // false\n *     query.select('-name')\n *     query.selectedExlusively() // true\n *     query.selectedInclusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  if (!this._fields) return false;\n  const keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (0 === this._fields[key]) return true;\n  }\n  return false;\n};\n\n/**\n * Merges `doc` with the current update object.\n *\n * @param {Object} doc\n */\n\nQuery.prototype._mergeUpdate = function (doc) {\n  if (!this._updateDoc) this._updateDoc = {};\n  if (doc instanceof Query) {\n    if (doc._updateDoc) {\n      utils.mergeClone(this._updateDoc, doc._updateDoc);\n    }\n  } else {\n    utils.mergeClone(this._updateDoc, doc);\n  }\n};\n\n/**\n * Returns default options.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._optionsForExec = function () {\n  const options = utils.clone(this.options);\n  return options;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._fieldsForExec = function () {\n  return utils.clone(this._fields);\n};\n\n/**\n * Return an update document with corrected $set operations.\n *\n * @api private\n */\n\nQuery.prototype._updateForExec = function () {\n  const update = utils.clone(this._updateDoc);\n  const ops = utils.keys(update);\n  const ret = {};\n  for (const op of ops) {\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n  this._compiledUpdate = ret;\n  return ret;\n};\n\n/**\n * Make sure _path is set.\n *\n * @parmam {String} method\n */\n\nQuery.prototype._ensurePath = function (method) {\n  if (!this._path) {\n    const msg = method + '() must be used after where() ' + 'when called with these arguments';\n    throw new Error(msg);\n  }\n};\n\n/*!\n * Permissions\n */\n\nQuery.permissions = require('./permissions');\nQuery._isPermitted = function (a, b) {\n  const denied = Query.permissions[b];\n  if (!denied) return true;\n  return true !== denied[a];\n};\nQuery.prototype._validate = function (action) {\n  let fail;\n  let validator;\n  if (undefined === action) {\n    validator = Query.permissions[this.op];\n    if ('function' != typeof validator) return true;\n    fail = validator(this);\n  } else if (!Query._isPermitted(action, this.op)) {\n    fail = action;\n  }\n  if (fail) {\n    throw new Error(fail + ' cannot be used with ' + this.op);\n  }\n};\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @param {Object} conds\n * @return {Boolean}\n */\n\nQuery.canMerge = function (conds) {\n  return conds instanceof Query || utils.isObject(conds);\n};\n\n/**\n * Set a trace function that will get called whenever a\n * query is executed.\n *\n * See `setTraceFunction()` for details.\n *\n * @param {Object} conds\n * @return {Boolean}\n */\nQuery.setGlobalTraceFunction = function (traceFunction) {\n  Query.traceFunction = traceFunction;\n};\n\n/*!\n * Exports.\n */\n\nQuery.utils = utils;\nQuery.env = require('./env');\nQuery.Collection = require('./collection');\nQuery.BaseCollection = require('./collection/collection');\nmodule.exports = exports = Query;\n\n// TODO\n// test utils","map":{"version":3,"names":["assert","require","util","utils","debug","Query","criteria","options","proto","constructor","prototype","op","undefined","Object","assign","_conditions","clone","_fields","_updateDoc","_path","_distinctDoc","_collection","_traceFunction","setOptions","find","$withinCmd","defineProperty","get","set","v","toConstructor","CustomQuery","call","inherits","p","isObject","methods","keys","method","i","length","args","Array","isArray","apply","collection","coll","Collection","collation","value","$where","js","where","arguments","type","merge","TypeError","equals","val","_ensurePath","path","eq","or","array","$or","push","nor","$nor","and","$and","split","forEach","$conditional","conds","mod","$mod","exists","$exists","elemMatch","fn","$elemMatch","within","_geoComparison","box","polygon","area","center","circle","coordinates","geometry","$box","from","shift","$polygon","Error","spherical","wKey","radius","$uniqueDocs","unique","near","maxDistance","$maxDistance","minDistance","$minDistance","format","$geometry","intersects","select","arg","_validate","fields","len","isArgumentsObject","field","include","substring","slice","numKeys","myFields","$slice","sort","_pushArr","ascend","Map","_pushMap","_validSortValue","asc","ascending","desc","descending","opts","s","$meta","String","toLowerCase","map","key","maxTime","maxTimeMS","ms","hint","k","j","slaveOk","read","setReadPreference","pref","deprecationWarningIssued","console","error","readPreference","readPref","readConcern","r","level","tailable","writeConcern","w","concern","wtimeout","wTimeout","source","canMerge","mergeClone","_find","_optionsForExec","$useProjection","projection","_fieldsForExec","collectionName","cursor","findCursor","findOne","_findOne","count","_count","distinct","_distinct","updateMany","doc","_update","_updateMany","_updateExec","updateOne","_updateOne","replaceOne","overwrite","_replaceOne","query","_mergeUpdate","_updateForExec","deleteOne","_deleteOne","justOne","deleteMany","_deleteMany","findOneAndUpdate","_findOneAndUpdate","update","findOneAndRemove","findOneAndDelete","conditions","_findOneAndRemove","setTraceFunction","traceFunction","exec","ok","fnName","then","res","rej","selected","selectedInclusively","selectedExclusively","ops","ret","$set","indexOf","_compiledUpdate","msg","permissions","_isPermitted","a","b","denied","action","fail","validator","setGlobalTraceFunction","env","BaseCollection","module","exports"],"sources":["E:/Out/my-outpass/node_modules/mquery/lib/mquery.js"],"sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\n\nconst assert = require('assert');\nconst util = require('util');\nconst utils = require('./utils');\nconst debug = require('debug')('mquery');\n\n/**\n * Query constructor used for building queries.\n *\n * #### Example:\n *\n *     var query = new Query({ name: 'mquery' });\n *     query.setOptions({ collection: moduleCollection })\n *     await query.where('age').gte(21).exec();\n *\n * @param {Object} [criteria] criteria for the query OR the collection instance to use\n * @param {Object} [options]\n * @api public\n */\n\nfunction Query(criteria, options) {\n  if (!(this instanceof Query))\n    return new Query(criteria, options);\n\n  const proto = this.constructor.prototype;\n\n  this.op = proto.op || undefined;\n\n  this.options = Object.assign({}, proto.options);\n\n  this._conditions = proto._conditions\n    ? utils.clone(proto._conditions)\n    : {};\n\n  this._fields = proto._fields\n    ? utils.clone(proto._fields)\n    : undefined;\n\n  this._updateDoc = proto._updateDoc\n    ? utils.clone(proto._updateDoc)\n    : undefined;\n\n  this._path = proto._path || undefined;\n  this._distinctDoc = proto._distinctDoc || undefined;\n  this._collection = proto._collection || undefined;\n  this._traceFunction = proto._traceFunction || undefined;\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (criteria) {\n    this.find(criteria);\n  }\n}\n\n/**\n * This is a parameter that the user can set which determines if mquery\n * uses $within or $geoWithin for queries. It defaults to true which\n * means $geoWithin will be used. If using MongoDB < 2.4 you should\n * set this to false.\n *\n * @api public\n * @property use$geoWithin\n */\n\nlet $withinCmd = '$geoWithin';\nObject.defineProperty(Query, 'use$geoWithin', {\n  get: function() { return $withinCmd == '$geoWithin'; },\n  set: function(v) {\n    if (true === v) {\n      // mongodb >= 2.4\n      $withinCmd = '$geoWithin';\n    } else {\n      $withinCmd = '$within';\n    }\n  }\n});\n\n/**\n * Converts this query to a constructor function with all arguments and options retained.\n *\n * #### Example:\n *\n *     // Create a query that will read documents with a \"video\" category from\n *     // `aCollection` on the primary node in the replica-set unless it is down,\n *     // in which case we'll read from a secondary node.\n *     var query = mquery({ category: 'video' })\n *     query.setOptions({ collection: aCollection, read: 'primaryPreferred' });\n *\n *     // create a constructor based off these settings\n *     var Video = query.toConstructor();\n *\n *     // Video is now a subclass of mquery() and works the same way but with the\n *     // default query parameters and options set.\n *\n *     // run a query with the previous settings but filter for movies with names\n *     // that start with \"Life\".\n *     Video().where({ name: /^Life/ }).exec(cb);\n *\n * @return {Query} new Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  function CustomQuery(criteria, options) {\n    if (!(this instanceof CustomQuery))\n      return new CustomQuery(criteria, options);\n    Query.call(this, criteria, options);\n  }\n\n  utils.inherits(CustomQuery, Query);\n\n  // set inherited defaults\n  const p = CustomQuery.prototype;\n\n  p.options = {};\n  p.setOptions(this.options);\n\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._updateDoc = utils.clone(this._updateDoc);\n  p._path = this._path;\n  p._distinctDoc = this._distinctDoc;\n  p._collection = this._collection;\n  p._traceFunction = this._traceFunction;\n\n  return CustomQuery;\n};\n\n/**\n * Sets query options.\n *\n * #### Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n * - collection the collection to query against\n *\n * _* denotes a query helper method is also available_\n *\n * @param {Object} options\n * @api public\n */\n\nQuery.prototype.setOptions = function(options) {\n  if (!(options && utils.isObject(options)))\n    return this;\n\n  // set arbitrary options\n  const methods = utils.keys(options);\n  let method;\n\n  for (let i = 0; i < methods.length; ++i) {\n    method = methods[i];\n\n    // use methods if exist (safer option manipulation)\n    if ('function' == typeof this[method]) {\n      const args = Array.isArray(options[method])\n        ? options[method]\n        : [options[method]];\n      this[method].apply(this, args);\n    } else {\n      this.options[method] = options[method];\n    }\n  }\n\n  return this;\n};\n\n/**\n * Sets this Querys collection.\n *\n * @param {Collection} coll\n * @return {Query} this\n */\n\nQuery.prototype.collection = function collection(coll) {\n  this._collection = new Query.Collection(coll);\n\n  return this;\n};\n\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * #### Example:\n *\n *     query.find().collation({ locale: \"en_US\", strength: 1 })\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\nQuery.prototype.collation = function(value) {\n  this.options.collation = value;\n  return this;\n};\n\n/**\n * Specifies a `$where` condition\n *\n * Use `$where` when you need to select documents using a JavaScript expression.\n *\n * #### Example:\n *\n *     query.$where('this.comments.length > 10 || this.name.length > 5')\n *\n *     query.$where(function () {\n *       return this.comments.length > 10 || this.name.length > 5;\n *     })\n *\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\nQuery.prototype.$where = function(js) {\n  this._conditions.$where = js;\n  return this;\n};\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * #### Example:\n *\n *     // instead of writing:\n *     await User.find({age: {$gte: 21, $lte: 65}});\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     await User\n *       .where('age').gte(21).lte(65)\n *       .where('name', /^vonderful/i)\n *       .where('friends').slice(10)\n *       .exec()\n *\n * @param {String} [path]\n * @param {Object} [val]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.where = function() {\n  if (!arguments.length) return this;\n  if (!this.op) this.op = 'find';\n\n  const type = typeof arguments[0];\n\n  if ('string' == type) {\n    this._path = arguments[0];\n\n    if (2 === arguments.length) {\n      this._conditions[this._path] = arguments[1];\n    }\n\n    return this;\n  }\n\n  if ('object' == type && !Array.isArray(arguments[0])) {\n    return this.merge(arguments[0]);\n  }\n\n  throw new TypeError('path must be a string or object');\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * #### Example:\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.equals = function equals(val) {\n  this._ensurePath('equals');\n  const path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n * This is alias of `equals`\n *\n * #### Example:\n *\n *     User.where('age').eq(49);\n *\n *     // is the same as\n *\n *     User.shere('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.eq = function eq(val) {\n  this._ensurePath('eq');\n  const path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * #### Example:\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.or = function or(array) {\n  const or = this._conditions.$or || (this._conditions.$or = []);\n  if (!Array.isArray(array)) array = [array];\n  or.push.apply(or, array);\n  return this;\n};\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * #### Example:\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.nor = function nor(array) {\n  const nor = this._conditions.$nor || (this._conditions.$nor = []);\n  if (!Array.isArray(array)) array = [array];\n  nor.push.apply(nor, array);\n  return this;\n};\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * #### Example:\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.and = function and(array) {\n  const and = this._conditions.$and || (this._conditions.$and = []);\n  if (!Array.isArray(array)) array = [array];\n  and.push.apply(and, array);\n  return this;\n};\n\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * #### Example:\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/*!\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\n'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function($conditional) {\n  Query.prototype[$conditional] = function() {\n    let path, val;\n\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    const conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ?\n      this._conditions[path] :\n      (this._conditions[path] = {});\n    conds['$' + $conditional] = val;\n    return this;\n  };\n});\n\n/**\n * Specifies a `$mod` condition\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.mod = function() {\n  let val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('mod');\n    val = arguments[0];\n    path = this._path;\n  } else if (2 === arguments.length && !Array.isArray(arguments[1])) {\n    this._ensurePath('mod');\n    val = [arguments[0], arguments[1]];\n    path = this._path;\n  } else if (3 === arguments.length) {\n    val = [arguments[1], arguments[2]];\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n\n/**\n * Specifies an `$exists` condition\n *\n * #### Example:\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.exists = function() {\n  let path, val;\n\n  if (0 === arguments.length) {\n    this._ensurePath('exists');\n    path = this._path;\n    val = true;\n  } else if (1 === arguments.length) {\n    if ('boolean' === typeof arguments[0]) {\n      this._ensurePath('exists');\n      path = this._path;\n      val = arguments[0];\n    } else {\n      path = arguments[0];\n      val = true;\n    }\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$exists = val;\n  return this;\n};\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * #### Example:\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.elemMatch = function() {\n  if (null == arguments[0])\n    throw new TypeError('Invalid argument');\n\n  let fn, path, criteria;\n\n  if ('function' === typeof arguments[0]) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    fn = arguments[0];\n  } else if (utils.isObject(arguments[0])) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    criteria = arguments[0];\n  } else if ('function' === typeof arguments[1]) {\n    path = arguments[0];\n    fn = arguments[1];\n  } else if (arguments[1] && utils.isObject(arguments[1])) {\n    path = arguments[0];\n    criteria = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (fn) {\n    criteria = new Query;\n    fn(criteria);\n    criteria = criteria._conditions;\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$elemMatch = criteria;\n  return this;\n};\n\n// Spatial queries\n\n/**\n * Sugar for geo-spatial queries.\n *\n * #### Example:\n *\n *     query.within().box()\n *     query.within().circle()\n *     query.within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * #### Note:\n *\n * Must be used after `where()`.\n *\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.within = function within() {\n  // opinionated, must be used after where\n  this._ensurePath('within');\n  this._geoComparison = $withinCmd;\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  if (2 === arguments.length) {\n    return this.box.apply(this, arguments);\n  } else if (2 < arguments.length) {\n    return this.polygon.apply(this, arguments);\n  }\n\n  const area = arguments[0];\n\n  if (!area)\n    throw new TypeError('Invalid argument');\n\n  if (area.center)\n    return this.circle(area);\n\n  if (area.box)\n    return this.box.apply(this, area.box);\n\n  if (area.polygon)\n    return this.polygon.apply(this, area.polygon);\n\n  if (area.type && area.coordinates)\n    return this.geometry(area);\n\n  throw new TypeError('Invalid argument');\n};\n\n/**\n * Specifies a $box condition\n *\n * #### Example:\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box('loc', lowerLeft, upperRight )\n *\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see Query#within #query_Query-within\n * @param {String} path\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.box = function() {\n  let path, box;\n\n  if (3 === arguments.length) {\n    // box('loc', [], [])\n    path = arguments[0];\n    box = [arguments[1], arguments[2]];\n  } else if (2 === arguments.length) {\n    // box([], [])\n    this._ensurePath('box');\n    path = this._path;\n    box = [arguments[0], arguments[1]];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = { $box: box };\n  return this;\n};\n\n/**\n * Specifies a $polygon condition\n *\n * #### Example:\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @param {String|Array} [path]\n * @param {Array|Object} [val]\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.polygon = function() {\n  let val, path;\n\n  if ('string' == typeof arguments[0]) {\n    // polygon('loc', [],[],[])\n    val = Array.from(arguments);\n    path = val.shift();\n  } else {\n    // polygon([],[],[])\n    this._ensurePath('polygon');\n    path = this._path;\n    val = Array.from(arguments);\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = { $polygon: val };\n  return this;\n};\n\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * #### Example:\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n *     // for spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.circle = function() {\n  let path, val;\n\n  if (1 === arguments.length) {\n    this._ensurePath('circle');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (!('radius' in val && val.center))\n    throw new Error('center and radius are required');\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n\n  const type = val.spherical\n    ? '$centerSphere'\n    : '$center';\n\n  const wKey = this._geoComparison || $withinCmd;\n  conds[wKey] = {};\n  conds[wKey][type] = [val.center, val.radius];\n\n  if ('unique' in val)\n    conds[wKey].$uniqueDocs = !!val.unique;\n\n  return this;\n};\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * #### Example:\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *     query.near({ center: { type: 'Point', coordinates: [..] }})\n *     query.near().geometry({ type: 'Point', coordinates: [..] })\n *\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.near = function near() {\n  let path, val;\n\n  this._geoComparison = '$near';\n\n  if (0 === arguments.length) {\n    return this;\n  } else if (1 === arguments.length) {\n    this._ensurePath('near');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (!val.center) {\n    throw new Error('center is required');\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n\n  const type = val.spherical\n    ? '$nearSphere'\n    : '$near';\n\n  // center could be a GeoJSON object or an Array\n  if (Array.isArray(val.center)) {\n    conds[type] = val.center;\n\n    const radius = 'maxDistance' in val\n      ? val.maxDistance\n      : null;\n\n    if (null != radius) {\n      conds.$maxDistance = radius;\n    }\n    if (null != val.minDistance) {\n      conds.$minDistance = val.minDistance;\n    }\n  } else {\n    // GeoJSON?\n    if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {\n      throw new Error(util.format('Invalid GeoJSON specified for %s', type));\n    }\n    conds[type] = { $geometry: val.center };\n\n    // MongoDB 2.6 insists on maxDistance being in $near / $nearSphere\n    if ('maxDistance' in val) {\n      conds[type]['$maxDistance'] = val.maxDistance;\n    }\n    if ('minDistance' in val) {\n      conds[type]['$minDistance'] = val.minDistance;\n    }\n  }\n\n  return this;\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * #### Example:\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * @param {Object} [arg]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.intersects = function intersects() {\n  // opinionated, must be used after where\n  this._ensurePath('intersects');\n\n  this._geoComparison = '$geoIntersects';\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  const area = arguments[0];\n\n  if (null != area && area.type && area.coordinates)\n    return this.geometry(area);\n\n  throw new TypeError('Invalid argument');\n};\n\n/**\n * Specifies a `$geometry` condition\n *\n * #### Example:\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * #### Note:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * The most recent path passed to `where()` is used.\n *\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @api public\n */\n\nQuery.prototype.geometry = function geometry() {\n  if (!('$within' == this._geoComparison ||\n        '$geoWithin' == this._geoComparison ||\n        '$near' == this._geoComparison ||\n        '$geoIntersects' == this._geoComparison)) {\n    throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');\n  }\n\n  let val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('geometry');\n    path = this._path;\n    val = arguments[0];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (!(val.type && Array.isArray(val.coordinates))) {\n    throw new TypeError('Invalid argument');\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison] = { $geometry: val };\n\n  return this;\n};\n\n// end spatial\n\n/**\n * Specifies which document fields to include or exclude\n *\n * #### String syntax\n *\n * When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\n *\n * #### Example:\n *\n *     // include a and b, exclude c\n *     query.select('a b -c');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({a: 1, b: 1, c: 0});\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\nQuery.prototype.select = function select() {\n  let arg = arguments[0];\n  if (!arg) return this;\n\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n\n  this._validate('select');\n\n  const fields = this._fields || (this._fields = {});\n  const type = typeof arg;\n  let i, len;\n\n  if (('string' == type || utils.isArgumentsObject(arg)) &&\n    'number' == typeof arg.length || Array.isArray(arg)) {\n    if ('string' == type)\n      arg = arg.split(/\\s+/);\n\n    for (i = 0, len = arg.length; i < len; ++i) {\n      let field = arg[i];\n      if (!field) continue;\n      const include = '-' == field[0] ? 0 : 1;\n      if (include === 0) field = field.substring(1);\n      fields[field] = include;\n    }\n\n    return this;\n  }\n\n  if (utils.isObject(arg)) {\n    const keys = utils.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      fields[keys[i]] = arg[keys[i]];\n    }\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n\n/**\n * Specifies a $slice condition for a `path`\n *\n * #### Example:\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @api public\n */\n\nQuery.prototype.slice = function() {\n  if (0 === arguments.length)\n    return this;\n\n  this._validate('slice');\n\n  let path, val;\n\n  if (1 === arguments.length) {\n    const arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const keys = Object.keys(arg);\n      const numKeys = keys.length;\n      for (let i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = [arguments[0], arguments[1]];\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (3 === arguments.length) {\n    path = arguments[0];\n    val = [arguments[1], arguments[2]];\n  }\n\n  const myFields = this._fields || (this._fields = {});\n  myFields[path] = { $slice: val };\n  return this;\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * #### Example:\n *\n *     // these are equivalent\n *     query.sort({ field: 'asc', test: -1 });\n *     query.sort('field -test');\n *     query.sort([['field', 1], ['test', -1]]);\n *\n * #### Note:\n *\n *  - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).\n *  - Cannot be used with `distinct()`\n *\n * @param {Object|String|Array} arg\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.sort = function(arg) {\n  if (!arg) return this;\n  let i, len, field;\n\n  this._validate('sort');\n\n  const type = typeof arg;\n\n  // .sort([['field', 1], ['test', -1]])\n  if (Array.isArray(arg)) {\n    len = arg.length;\n    for (i = 0; i < arg.length; ++i) {\n      if (!Array.isArray(arg[i])) {\n        throw new Error('Invalid sort() argument, must be array of arrays');\n      }\n      _pushArr(this.options, arg[i][0], arg[i][1]);\n    }\n    return this;\n  }\n\n  // .sort('field -test')\n  if (1 === arguments.length && 'string' == type) {\n    arg = arg.split(/\\s+/);\n    len = arg.length;\n    for (i = 0; i < len; ++i) {\n      field = arg[i];\n      if (!field) continue;\n      const ascend = '-' == field[0] ? -1 : 1;\n      if (ascend === -1) field = field.substring(1);\n      push(this.options, field, ascend);\n    }\n\n    return this;\n  }\n\n  // .sort({ field: 1, test: -1 })\n  if (utils.isObject(arg)) {\n    const keys = utils.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      field = keys[i];\n      push(this.options, field, arg[field]);\n    }\n\n    return this;\n  }\n\n  if (typeof Map !== 'undefined' && arg instanceof Map) {\n    _pushMap(this.options, arg);\n    return this;\n  }\n  throw new TypeError('Invalid sort() argument. Must be a string, object, or array.');\n};\n\n/*!\n * @ignore\n */\n\nconst _validSortValue = {\n  1: 1,\n  '-1': -1,\n  asc: 1,\n  ascending: 1,\n  desc: -1,\n  descending: -1\n};\n\nfunction push(opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' +\n      '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' +\n      '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n\n  let s;\n  if (value && value.$meta) {\n    s = opts.sort || (opts.sort = {});\n    s[field] = { $meta: value.$meta };\n    return;\n  }\n\n  s = opts.sort || (opts.sort = {});\n  let val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: { ' + field + ': ' + value + ' }');\n\n  s[field] = val;\n}\n\nfunction _pushArr(opts, field, value) {\n  opts.sort = opts.sort || [];\n  if (!Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' +\n      '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' +\n      '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n\n  let val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: [ ' + field + ', ' + value + ' ]');\n\n  opts.sort.push([field, val]);\n}\n\nfunction _pushMap(opts, map) {\n  opts.sort = opts.sort || new Map();\n  if (!(opts.sort instanceof Map)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or ' +\n      'object or map consistently');\n  }\n  map.forEach(function(value, key) {\n    let val = String(value || 1).toLowerCase();\n    val = _validSortValue[val];\n    if (!val) throw new TypeError('Invalid sort value: < ' + key + ': ' + value + ' >');\n\n    opts.sort.set(key, val);\n  });\n}\n\n\n/**\n * Specifies the limit option.\n *\n * #### Example:\n *\n *     query.limit(20)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the skip option.\n *\n * #### Example:\n *\n *     query.skip(100).limit(20)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the batchSize option.\n *\n * #### Example:\n *\n *     query.batchSize(100)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the `comment` option.\n *\n * #### Example:\n *\n *     query.comment('login query')\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\n * @api public\n */\n\n/*!\n * limit, skip, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\n\n['limit', 'skip', 'batchSize', 'comment'].forEach(function(method) {\n  Query.prototype[method] = function(v) {\n    this._validate(method);\n    this.options[method] = v;\n    return this;\n  };\n});\n\n/**\n * Specifies the maxTimeMS option.\n *\n * #### Example:\n *\n *     query.maxTime(100)\n *     query.maxTimeMS(100)\n *\n * @method maxTime\n * @memberOf Query\n * @param {Number} ms\n * @see mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS\n * @api public\n */\n\nQuery.prototype.maxTime = Query.prototype.maxTimeMS = function(ms) {\n  this._validate('maxTime');\n  this.options.maxTimeMS = ms;\n  return this;\n};\n\n/**\n * Sets query hints.\n *\n * #### Example:\n *\n *     query.hint({ indexA: 1, indexB: -1});\n *     query.hint('indexA_1_indexB_1');\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|string} val a hint object or the index name\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\n * @api public\n */\n\nQuery.prototype.hint = function() {\n  if (0 === arguments.length) return this;\n\n  this._validate('hint');\n\n  const arg = arguments[0];\n  if (utils.isObject(arg)) {\n    const hint = this.options.hint || (this.options.hint = {});\n\n    // must keep object keys in order so don't use Object.keys()\n    for (const k in arg) {\n      hint[k] = arg[k];\n    }\n\n    return this;\n  }\n  if (typeof arg === 'string') {\n    this.options.hint = arg;\n    return this;\n  }\n\n  throw new TypeError('Invalid hint. ' + arg);\n};\n\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `j` value if it is specified in writeConcern options\n *\n * #### Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.j = function j(val) {\n  this.options.j = val;\n  return this;\n};\n\n/**\n * Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.\n *\n * #### Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see read()\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.slaveOk = function(v) {\n  this.options.slaveOk = arguments.length ? !!v : true;\n  return this;\n};\n\n/**\n * Sets the readPreference option for the query.\n *\n * #### Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // you can also use mongodb.ReadPreference class to also specify tags\n *     new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))\n *\n *     new Query().setReadPreference('primary') // alias of .read()\n *\n * #### Preferences:\n *\n *     primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = Query.prototype.setReadPreference = function(pref) {\n  if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {\n    console.error('Deprecation warning: \\'tags\\' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.');\n    Query.prototype.read.deprecationWarningIssued = true;\n  }\n  this.options.readPreference = utils.readPref(pref);\n  return this;\n};\n\n/**\n * Sets the readConcern option for the query.\n *\n * #### Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *     new Query().r('s') // r is alias of readConcern\n *\n *\n * #### Read Concern Level:\n *\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n *\n * Aliases\n *\n *     l   local\n *     a   available\n *     m   majority\n *     lz  linearizable\n *     s   snapshot\n *\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\n *\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.readConcern = Query.prototype.r = function(level) {\n  this.options.readConcern = utils.readConcern(level);\n  return this;\n};\n\n/**\n * Sets tailable option.\n *\n * #### Example:\n *\n *     query.tailable() <== true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} v defaults to true\n * @see mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors\n * @api public\n */\n\nQuery.prototype.tailable = function() {\n  this._validate('tailable');\n\n  this.options.tailable = arguments.length\n    ? !!arguments[0]\n    : true;\n\n  return this;\n};\n\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `w` value if it is specified in writeConcern options\n *\n * #### Example:\n *\n *     mquery().writeConcern(0)\n *     mquery().writeConcern(1)\n *     mquery().writeConcern({ w: 1, j: true, wtimeout: 2000 })\n *     mquery().writeConcern('majority')\n *     mquery().writeConcern('m') // same as majority\n *     mquery().writeConcern('tagSetName') // if the tag set is 'm', use .writeConcern({ w: 'm' }) instead\n *     mquery().w(1) // w is alias of writeConcern\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {String|number|object} concern 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.writeConcern = Query.prototype.w = function writeConcern(concern) {\n  if ('object' === typeof concern) {\n    if ('undefined' !== typeof concern.j) this.options.j = concern.j;\n    if ('undefined' !== typeof concern.w) this.options.w = concern.w;\n    if ('undefined' !== typeof concern.wtimeout) this.options.wtimeout = concern.wtimeout;\n  } else {\n    this.options.w = 'm' === concern ? 'majority' : concern;\n  }\n  return this;\n};\n\n/**\n * Specifies a time limit, in milliseconds, for the write concern.\n * If `ms > 1`, it is maximum amount of time to wait for this write\n * to propagate through the replica set before this operation fails.\n * The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to `wtimeout` value if it is specified in writeConcern\n *\n * #### Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000)\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.wtimeout = Query.prototype.wTimeout = function wtimeout(ms) {\n  this.options.wtimeout = ms;\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function(source) {\n  if (!source)\n    return this;\n\n  if (!Query.canMerge(source))\n    throw new TypeError('Invalid argument. Expected instanceof mquery or plain object');\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options);\n    }\n\n    if (source._updateDoc) {\n      this._updateDoc || (this._updateDoc = {});\n      utils.mergeClone(this._updateDoc, source._updateDoc);\n    }\n\n    if (source._distinctDoc) {\n      this._distinctDoc = source._distinctDoc;\n    }\n\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source);\n\n  return this;\n};\n\n/**\n * Finds documents.\n *\n * #### Example:\n *\n *     query.find()\n *     await query.find()\n *     await query.find({ name: 'Burning Lights' })\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function(criteria) {\n  this.op = 'find';\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  return this;\n};\n\n/**\n * Executes a `find` Query\n * @returns the result\n */\nQuery.prototype._find = async function _find() {\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('_find', this._collection.collectionName, conds, options);\n\n  return this._collection.find(conds, options);\n};\n\n/**\n * Returns the query cursor\n *\n * #### Examples:\n *\n *     query.find().cursor();\n *     query.cursor({ name: 'Burning Lights' });\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Object} cursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor(criteria) {\n  if (this.op) {\n    if (this.op !== 'find') {\n      throw new TypeError('.cursor only support .find method');\n    }\n  } else {\n    this.find(criteria);\n  }\n\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('findCursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n};\n\n/**\n * Executes the query as a findOne() operation.\n *\n * #### Example:\n *\n *     query.findOne().where('name', /^Burning/);\n *\n *     query.findOne({ name: /^Burning/ })\n *\n *     await query.findOne({ name: /^Burning/ }); // executes\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOne = function(criteria) {\n  this.op = 'findOne';\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  return this;\n};\n\n/**\n * Executes a `findOne` Query\n * @returns the results\n */\nQuery.prototype._findOne = async function _findOne() {\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('findOne', this._collection.collectionName, conds, options);\n\n  return this._collection.findOne(conds, options);\n};\n\n/**\n * Exectues the query as a count() operation.\n *\n * #### Example:\n *\n *     query.count().where('color', 'black').exec();\n *\n *     query.count({ color: 'black' })\n *\n *     await query.count({ color: 'black' });\n *\n *     const doc = await query.where('color', 'black').count();\n *     console.log('there are %d kittens', count);\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count\n * @api public\n */\n\nQuery.prototype.count = function(criteria) {\n  this.op = 'count';\n  this._validate();\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  return this;\n};\n\n/**\n * Executes a `count` Query\n * @returns the results\n */\nQuery.prototype._count = async function _count() {\n  const conds = this._conditions,\n      options = this._optionsForExec();\n\n  debug('count', this._collection.collectionName, conds, options);\n\n  return this._collection.count(conds, options);\n};\n\n/**\n * Declares or executes a distinct() operation.\n *\n * #### Example:\n *\n *     await distinct(criteria, field)\n *     distinct(criteria, field)\n *     await distinct(field)\n *     distinct(field)\n *     await distinct()\n *     distinct()\n *\n * @param {Object|Query} [criteria]\n * @param {String} [field]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct\n * @api public\n */\n\nQuery.prototype.distinct = function(criteria, field) {\n  this.op = 'distinct';\n  this._validate();\n\n  if (!field && typeof criteria === 'string') {\n    field = criteria;\n    criteria = undefined;\n  }\n\n  if ('string' == typeof field) {\n    this._distinctDoc = field;\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  return this;\n};\n\n/**\n * Executes a `distinct` Query\n * @returns the results\n */\nQuery.prototype._distinct = async function _distinct() {\n  if (!this._distinctDoc) {\n    throw new Error('No value for `distinct` has been declared');\n  }\n\n  const conds = this._conditions,\n      options = this._optionsForExec();\n\n  debug('distinct', this._collection.collectionName, conds, options);\n\n  return this._collection.distinct(this._distinctDoc, conds, options);\n};\n\n/**\n * Declare and/or execute this query as an `updateMany()` operation. This function will update _all_ documents that match\n * `criteria`, rather than just the first one.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * #### Example:\n *\n *     // Update every document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.updateMany = function updateMany(criteria, doc, options) {\n  if (arguments.length === 1) {\n    doc = criteria;\n    criteria = options = undefined;\n  }\n\n  return _update(this, 'updateMany', criteria, doc, options);\n};\n\n/**\n * Executes a `updateMany` Query\n * @returns the results\n */\nQuery.prototype._updateMany = async function() {\n  return _updateExec(this, 'updateMany');\n};\n\n/**\n * Declare and/or execute this query as an `updateOne()` operation. This function will _always_ update just one document,\n * regardless of the `multi` option.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * #### Example:\n *\n *     // Update the first document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.updateOne = function updateOne(criteria, doc, options) {\n  if (arguments.length === 1) {\n    doc = criteria;\n    criteria = options = undefined;\n  }\n\n  return _update(this, 'updateOne', criteria, doc, options);\n};\n\n/**\n * Executes a `updateOne` Query\n * @returns the results\n */\nQuery.prototype._updateOne = async function() {\n  return _updateExec(this, 'updateOne');\n};\n\n/**\n * Declare and/or execute this query as an `replaceOne()` operation. Similar\n * to `updateOne()`, except `replaceOne()` is not allowed to use atomic\n * modifiers (`$set`, `$push`, etc.). Calling `replaceOne()` will always\n * replace the existing doc.\n *\n * #### Example:\n *\n *     // Replace the document with `_id` 1 with `{ _id: 1, year: 2017 }`\n *     mquery().replaceOne({ _id: 1 }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.replaceOne = function replaceOne(criteria, doc, options) {\n  if (arguments.length === 1) {\n    doc = criteria;\n    criteria = options = undefined;\n  }\n\n  this.setOptions({ overwrite: true });\n  return _update(this, 'replaceOne', criteria, doc, options);\n};\n\n/**\n * Executes a `replaceOne` Query\n * @returns the results\n */\nQuery.prototype._replaceOne = async function() {\n  return _updateExec(this, 'replaceOne');\n};\n\n/*!\n * Internal helper for updateMany, updateOne\n */\n\nfunction _update(query, op, criteria, doc, options) {\n  query.op = op;\n\n  if (Query.canMerge(criteria)) {\n    query.merge(criteria);\n  }\n\n  if (doc) {\n    query._mergeUpdate(doc);\n  }\n\n  if (utils.isObject(options)) {\n    // { overwrite: true }\n    query.setOptions(options);\n  }\n\n  return query;\n}\n\n/**\n * Helper for de-duplicating \"update*\" functions\n * @param {Query} query The Query Object (replacement for \"this\")\n * @param {String} op The Operation to be done\n * @returns the results\n */\nasync function _updateExec(query, op) {\n  const options = query._optionsForExec();\n\n  const criteria = query._conditions;\n  const doc = query._updateForExec();\n\n  debug('update', query._collection.collectionName, criteria, doc, options);\n\n  return query._collection[op](criteria, doc, options);\n}\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation.\n *\n * #### Example:\n *\n *     await mquery(collection).deleteOne({ artist: 'Anne Murray' })\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.deleteOne = function(criteria) {\n  this.op = 'deleteOne';\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  return this;\n};\n\n/**\n * Executes a `deleteOne` Query\n * @returns the results\n */\nQuery.prototype._deleteOne = async function() {\n  const options = this._optionsForExec();\n  delete options.justOne;\n\n  const conds = this._conditions;\n\n  debug('deleteOne', this._collection.collectionName, conds, options);\n\n  return this._collection.deleteOne(conds, options);\n};\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Always deletes\n * _every_ document that matches `criteria`.\n *\n * #### Example:\n *\n *     await mquery(collection).deleteMany({ artist: 'Anne Murray' })\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.deleteMany = function(criteria) {\n  this.op = 'deleteMany';\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  return this;\n};\n\n/**\n * Executes a `deleteMany` Query\n * @returns the results\n */\nQuery.prototype._deleteMany = async function() {\n  const options = this._optionsForExec();\n  delete options.justOne;\n\n  const conds = this._conditions;\n\n  debug('deleteOne', this._collection.collectionName, conds, options);\n\n  return this._collection.deleteMany(conds, options);\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any).\n *\n * #### Available options\n *\n * - `new`: bool - true to return the modified document rather than the original. defaults to true\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * #### Examples:\n *\n *     await query.findOneAndUpdate(conditions, update, options) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     await query.findOneAndUpdate(conditions, update) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     await query.findOneAndUpdate(update)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     await query.findOneAndUpdate()                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function(criteria, doc, options) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n\n  if (arguments.length === 1) {\n    doc = criteria;\n    criteria = options = undefined;\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options && this.setOptions(options);\n\n  return this;\n};\n\n/**\n * Executes a `findOneAndUpdate` Query\n * @returns the results\n */\nQuery.prototype._findOneAndUpdate = async function() {\n  const conds = this._conditions;\n  const update = this._updateForExec();\n  const options = this._optionsForExec();\n\n  return this._collection.findOneAndUpdate(conds, update, options);\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, returning the found document (if any).\n *\n * #### Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * #### Examples:\n *\n *     await A.where().findOneAndRemove(conditions, options) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     await A.where().findOneAndRemove(conditions) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     await A.where().findOneAndRemove()   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *     A.where().findOneAndDelete()           // alias of .findOneAndRemove()\n *\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = Query.prototype.findOneAndDelete = function(conditions, options) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n\n  // apply conditions\n  if (Query.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  // apply options\n  options && this.setOptions(options);\n\n  return this;\n};\n\n/**\n * Executes a `findOneAndRemove` Query\n * @returns the results\n */\nQuery.prototype._findOneAndRemove = async function() {\n  const options = this._optionsForExec();\n  const conds = this._conditions;\n\n  return this._collection.findOneAndDelete(conds, options);\n};\n\n/**\n * Add trace function that gets called when the query is executed.\n * The function will be called with (method, queryInfo, query) and\n * should return a callback function which will be called\n * with (err, result, millis) when the query is complete.\n *\n * queryInfo is an object containing: {\n *   collectionName: <name of the collection>,\n *   conditions: <query criteria>,\n *   options: <comment, fields, readPreference, etc>,\n *   doc: [document to update, if applicable]\n * }\n *\n * NOTE: Does not trace stream queries.\n *\n * @param {Function} traceFunction\n * @return {Query} this\n * @api public\n */\nQuery.prototype.setTraceFunction = function(traceFunction) {\n  this._traceFunction = traceFunction;\n  return this;\n};\n\n/**\n * Executes the query\n *\n * #### Examples:\n *\n *     query.exec();\n *     await query.exec();\n *     query.exec('update');\n *     await query.exec('find');\n *\n * @param {String|Function} [operation]\n * @api public\n */\n\nQuery.prototype.exec = async function exec(op) {\n  if (typeof op === 'string') {\n    this.op = op;\n  }\n\n  assert.ok(this.op, 'Missing query type: (find, etc)');\n\n  const fnName = '_' + this.op;\n\n  // better error, because default would list it as \"this[fnName] is not a function\"\n  if (typeof this[fnName] !== 'function') {\n    throw new TypeError(`this[${fnName}] is not a function`);\n  }\n\n  return this[fnName]();\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = async function(res, rej) {\n  return this.exec().then(res, rej);\n};\n\n/**\n * Returns a cursor for the given `find` query.\n *\n * @throws Error if operation is not a find\n * @returns {Cursor} MongoDB driver cursor\n */\n\nQuery.prototype.cursor = function() {\n  if ('find' != this.op)\n    throw new Error('cursor() is only available for find');\n\n  const conds = this._conditions;\n\n  const options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('cursor', this._collection.collectionName, conds, options);\n\n  return this._collection.findCursor(conds, options);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selected = function selected() {\n  return !!(this._fields && Object.keys(this._fields).length > 0);\n};\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *     query.selectedExlusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  if (!this._fields) return false;\n\n  const keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (0 === this._fields[key]) return false;\n    if (this._fields[key] &&\n        typeof this._fields[key] === 'object' &&\n        this._fields[key].$meta) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExlusively() // false\n *     query.select('-name')\n *     query.selectedExlusively() // true\n *     query.selectedInclusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  if (!this._fields) return false;\n\n  const keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (0 === this._fields[key]) return true;\n  }\n\n  return false;\n};\n\n/**\n * Merges `doc` with the current update object.\n *\n * @param {Object} doc\n */\n\nQuery.prototype._mergeUpdate = function(doc) {\n  if (!this._updateDoc) this._updateDoc = {};\n  if (doc instanceof Query) {\n    if (doc._updateDoc) {\n      utils.mergeClone(this._updateDoc, doc._updateDoc);\n    }\n  } else {\n    utils.mergeClone(this._updateDoc, doc);\n  }\n};\n\n/**\n * Returns default options.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._optionsForExec = function() {\n  const options = utils.clone(this.options);\n  return options;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._fieldsForExec = function() {\n  return utils.clone(this._fields);\n};\n\n/**\n * Return an update document with corrected $set operations.\n *\n * @api private\n */\n\nQuery.prototype._updateForExec = function() {\n  const update = utils.clone(this._updateDoc);\n  const ops = utils.keys(update);\n  const ret = {};\n\n  for (const op of ops) {\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  this._compiledUpdate = ret;\n  return ret;\n};\n\n/**\n * Make sure _path is set.\n *\n * @parmam {String} method\n */\n\nQuery.prototype._ensurePath = function(method) {\n  if (!this._path) {\n    const msg = method + '() must be used after where() '\n                     + 'when called with these arguments';\n    throw new Error(msg);\n  }\n};\n\n/*!\n * Permissions\n */\n\nQuery.permissions = require('./permissions');\n\nQuery._isPermitted = function(a, b) {\n  const denied = Query.permissions[b];\n  if (!denied) return true;\n  return true !== denied[a];\n};\n\nQuery.prototype._validate = function(action) {\n  let fail;\n  let validator;\n\n  if (undefined === action) {\n\n    validator = Query.permissions[this.op];\n    if ('function' != typeof validator) return true;\n\n    fail = validator(this);\n\n  } else if (!Query._isPermitted(action, this.op)) {\n    fail = action;\n  }\n\n  if (fail) {\n    throw new Error(fail + ' cannot be used with ' + this.op);\n  }\n};\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @param {Object} conds\n * @return {Boolean}\n */\n\nQuery.canMerge = function(conds) {\n  return conds instanceof Query || utils.isObject(conds);\n};\n\n/**\n * Set a trace function that will get called whenever a\n * query is executed.\n *\n * See `setTraceFunction()` for details.\n *\n * @param {Object} conds\n * @return {Boolean}\n */\nQuery.setGlobalTraceFunction = function(traceFunction) {\n  Query.traceFunction = traceFunction;\n};\n\n/*!\n * Exports.\n */\n\nQuery.utils = utils;\nQuery.env = require('./env');\nQuery.Collection = require('./collection');\nQuery.BaseCollection = require('./collection/collection');\nmodule.exports = exports = Query;\n\n// TODO\n// test utils\n"],"mappings":"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AG,SAASA,GAAGA,CAACH,KAAK,EAAE;EACxC,MAAMG,GAAG,GAAG,IAAI,CAACnD,WAAW,CAACoD,IAAI,KAAK,IAAI,CAACpD,WAAW,CAACoD,IAAI,GAAG,EAAE,CAAC;EACjE,IAAI,CAACzB,KAAK,CAACC,OAAO,CAACoB,KAAK,CAAC,EAAEA,KAAK,GAAG,CAACA,KAAK,CAAC;EAC1CG,GAAG,CAACD,IAAI,CAACrB,KAAK,CAACsB,GAAG,EAAEH,KAAK,CAAC;EAC1B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA1D,KAAK,CAACK,SAAS,CAAC0D,GAAG,GAAG,SAASA,GAAGA,CAACL,KAAK,EAAE;EACxC,MAAMK,GAAG,GAAG,IAAI,CAACrD,WAAW,CAACsD,IAAI,KAAK,IAAI,CAACtD,WAAW,CAACsD,IAAI,GAAG,EAAE,CAAC;EACjE,IAAI,CAAC3B,KAAK,CAACC,OAAO,CAACoB,KAAK,CAAC,EAAEA,KAAK,GAAG,CAACA,KAAK,CAAC;EAC1CK,GAAG,CAACH,IAAI,CAACrB,KAAK,CAACwB,GAAG,EAAEL,KAAK,CAAC;EAC1B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;A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AAE,MAAM,IAAIF,SAAS,CAAC,wBAAwB,GAAGiF,GAAG,GAAG,IAAI,GAAGxF,KAAK,GAAG,IAAI,CAAC;IAEnFkF,IAAI,CAACV,IAAI,CAAC7F,GAAG,CAAC6G,GAAG,EAAE/E,GAAG,CAAC;EACzB,CAAC,CAAC;AACJ;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,CAAC,CAACa,OAAO,CAAC,UAASjC,MAAM,EAAE;EACjEjC,KAAK,CAACK,SAAS,CAAC4B,MAAM,CAAC,GAAG,UAAST,CAAC,EAAE;IACpC,IAAI,CAACiF,SAAS,CAACxE,MAAM,CAAC;IACtB,IAAI,CAAC/B,OAAO,CAAC+B,MAAM,CAAC,GAAGT,CAAC;IACxB,OAAO,IAAI;EACb,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAxB,KAAK,CAACK,SAAS,CAACgI,OAAO,GAAGrI,KAAK,CAACK,SAAS,CAACiI,SAAS,GAAG,UAASC,EAAE,EAAE;EACjE,IAAI,CAAC9B,SAAS,CAAC,SAAS,CAAC;EACzB,IAAI,CAACvG,OAAO,CAACoI,SAAS,GAAGC,EAAE;EAC3B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvI,KAAK,CAACK,SAAS,CAACmI,IAAI,GAAG,YAAW;EAChC,IAAI,CAAC,KAAKxF,SAAS,CAACb,MAAM,EAAE,OAAO,IAAI;EAEvC,IAAI,CAACsE,SAAS,CAAC,MAAM,CAAC;EAEtB,MAAMD,GAAG,GAAGxD,SAAS,CAAC,CAAC,CAAC;EACxB,IAAIlD,KAAK,CAACgC,QAAQ,CAAC0E,GAAG,CAAC,EAAE;IACvB,MAAMgC,IAAI,GAAG,IAAI,CAACtI,OAAO,CAACsI,IAAI,KAAK,IAAI,CAACtI,OAAO,CAACsI,IAAI,GAAG,CAAC,CAAC,CAAC;;IAE1D;IACA,KAAK,MAAMC,CAAC,IAAIjC,GAAG,EAAE;MACnBgC,IAAI,CAACC,CAAC,CAAC,GAAGjC,GAAG,CAACiC,CAAC,CAAC;IAClB;IAEA,OAAO,IAAI;EACb;EACA,IAAI,OAAOjC,GAAG,KAAK,QAAQ,EAAE;IAC3B,IAAI,CAACtG,OAAO,CAACsI,IAAI,GAAGhC,GAAG;IACvB,OAAO,IAAI;EACb;EAEA,MAAM,IAAIrD,SAAS,CAAC,gBAAgB,GAAGqD,GAAG,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAxG,KAAK,CAACK,SAAS,CAACqI,CAAC,GAAG,SAASA,CAACA,CAACrF,GAAG,EAAE;EAClC,IAAI,CAACnD,OAAO,CAACwI,CAAC,GAAGrF,GAAG;EACpB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEArD,KAAK,CAACK,SAAS,CAACsI,OAAO,GAAG,UAASnH,CAAC,EAAE;EACpC,IAAI,CAACtB,OAAO,CAACyI,OAAO,GAAG3F,SAAS,CAACb,MAAM,GAAG,CAAC,CAACX,CAAC,GAAG,IAAI;EACpD,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAxB,KAAK,CAACK,SAAS,CAACuI,IAAI,GAAG5I,KAAK,CAACK,SAAS,CAACwI,iBAAiB,GAAG,UAASC,IAAI,EAAE;EACxE,IAAI9F,SAAS,CAACb,MAAM,GAAG,CAAC,IAAI,CAACnC,KAAK,CAACK,SAAS,CAACuI,IAAI,CAACG,wBAAwB,EAAE;IAC1EC,OAAO,CAACC,KAAK,CAAC,2IAA2I,CAAC;IAC1JjJ,KAAK,CAACK,SAAS,CAACuI,IAAI,CAACG,wBAAwB,GAAG,IAAI;EACtD;EACA,IAAI,CAAC7I,OAAO,CAACgJ,cAAc,GAAGpJ,KAAK,CAACqJ,QAAQ,CAACL,IAAI,CAAC;EAClD,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA9I,KAAK,CAACK,SAAS,CAAC+I,WAAW,GAAGpJ,KAAK,CAACK,SAAS,CAACgJ,CAAC,GAAG,UAASC,KAAK,EAAE;EAChE,IAAI,CAACpJ,OAAO,CAACkJ,WAAW,GAAGtJ,KAAK,CAACsJ,WAAW,CAACE,KAAK,CAAC;EACnD,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAtJ,KAAK,CAACK,SAAS,CAACkJ,QAAQ,GAAG,YAAW;EACpC,IAAI,CAAC9C,SAAS,CAAC,UAAU,CAAC;EAE1B,IAAI,CAACvG,O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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}