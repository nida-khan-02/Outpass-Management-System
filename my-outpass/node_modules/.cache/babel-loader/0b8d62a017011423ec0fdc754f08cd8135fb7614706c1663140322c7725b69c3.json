{"ast":null,"code":"/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('../error/mongooseError');\nconst Readable = require('stream').Readable;\nconst eachAsync = require('../helpers/cursor/eachAsync');\nconst helpers = require('../queryHelpers');\nconst kareem = require('kareem');\nconst immediate = require('../helpers/immediate');\nconst {\n  once\n} = require('node:events');\nconst util = require('util');\n\n/**\n * A QueryCursor is a concurrency primitive for processing query results\n * one document at a time. A QueryCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * QueryCursors execute the model's pre `find` hooks before loading any documents\n * from MongoDB, and the model's post `find` hooks after loading each document.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Query#cursor()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.cursor()) instead.\n *\n * @param {Query} query\n * @param {Object} options query options passed to `.find()`\n * @inherits Readable https://nodejs.org/api/stream.html#class-streamreadable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction QueryCursor(query) {\n  // set autoDestroy=true because on node 12 it's by default false\n  // gh-10902 need autoDestroy to destroy correctly and emit 'close' event\n  Readable.call(this, {\n    autoDestroy: true,\n    objectMode: true\n  });\n  this.cursor = null;\n  this.skipped = false;\n  this.query = query;\n  this._closed = false;\n  const model = query.model;\n  this._mongooseOptions = {};\n  this._transforms = [];\n  this.model = model;\n  this.options = {};\n  model.hooks.execPre('find', query, err => {\n    if (err != null) {\n      if (err instanceof kareem.skipWrappedFunction) {\n        const resultValue = err.args[0];\n        if (resultValue != null && (!Array.isArray(resultValue) || resultValue.length)) {\n          const err = new MongooseError('Cannot `skipMiddlewareFunction()` with a value when using ' + '`.find().cursor()`, value must be nullish or empty array, got \"' + util.inspect(resultValue) + '\".');\n          this._markError(err);\n          this.listeners('error').length > 0 && this.emit('error', err);\n          return;\n        }\n        this.skipped = true;\n        this.emit('cursor', null);\n        return;\n      }\n      this._markError(err);\n      this.listeners('error').length > 0 && this.emit('error', err);\n      return;\n    }\n    Object.assign(this.options, query._optionsForExec());\n    this._transforms = this._transforms.concat(query._transforms.slice());\n    if (this.options.transform) {\n      this._transforms.push(this.options.transform);\n    }\n    // Re: gh-8039, you need to set the `cursor.batchSize` option, top-level\n    // `batchSize` option doesn't work.\n    if (this.options.batchSize) {\n      // Max out the number of documents we'll populate in parallel at 5000.\n      this.options._populateBatchSize = Math.min(this.options.batchSize, 5000);\n    }\n    if (model.collection._shouldBufferCommands() && model.collection.buffer) {\n      model.collection.queue.push([() => _getRawCursor(query, this)]);\n    } else {\n      _getRawCursor(query, this);\n    }\n  });\n}\nutil.inherits(QueryCursor, Readable);\n\n/*!\n * ignore\n */\n\nfunction _getRawCursor(query, queryCursor) {\n  try {\n    const cursor = query.model.collection.find(query._conditions, queryCursor.options);\n    queryCursor.cursor = cursor;\n    queryCursor.emit('cursor', cursor);\n  } catch (err) {\n    queryCursor._markError(err);\n    queryCursor.listeners('error').length > 0 && queryCursor.emit('error', queryCursor._error);\n  }\n}\n\n/**\n * Necessary to satisfy the Readable API\n * @method _read\n * @memberOf QueryCursor\n * @instance\n * @api private\n */\n\nQueryCursor.prototype._read = function () {\n  _next(this, (error, doc) => {\n    if (error) {\n      return this.emit('error', error);\n    }\n    if (!doc) {\n      this.push(null);\n      this.cursor.close(function (error) {\n        if (error) {\n          return this.emit('error', error);\n        }\n      });\n      return;\n    }\n    this.push(doc);\n  });\n};\n\n/**\n * Returns the underlying cursor from the MongoDB Node driver that this cursor uses.\n *\n * @method getDriverCursor\n * @memberOf QueryCursor\n * @returns {Cursor} MongoDB Node driver cursor instance\n * @instance\n * @api public\n */\n\nQueryCursor.prototype.getDriverCursor = async function getDriverCursor() {\n  if (this.cursor) {\n    return this.cursor;\n  }\n  await once(this, 'cursor');\n  return this.cursor;\n};\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * #### Example:\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {QueryCursor}\n * @memberOf QueryCursor\n * @api public\n * @method map\n */\n\nObject.defineProperty(QueryCursor.prototype, 'map', {\n  value: function (fn) {\n    this._transforms.push(fn);\n    return this;\n  },\n  enumerable: true,\n  configurable: true,\n  writable: true\n});\n\n/**\n * Marks this cursor as errored\n * @method _markError\n * @memberOf QueryCursor\n * @instance\n * @api private\n */\n\nQueryCursor.prototype._markError = function (error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see AggregationCursor.close https://mongodb.github.io/node-mongodb-native/4.9/classes/AggregationCursor.html#close\n */\n\nQueryCursor.prototype.close = async function close() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.close() no longer accepts a callback');\n  }\n  try {\n    await this.cursor.close();\n    this._closed = true;\n    this.emit('close');\n  } catch (error) {\n    this.listeners('error').length > 0 && this.emit('error', error);\n    throw error;\n  }\n};\n\n/**\n * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n * if the resultant data has already been retrieved by this cursor.\n *\n * @return {AggregationCursor} this\n * @api public\n * @method rewind\n */\n\nQueryCursor.prototype.rewind = function () {\n  _waitForCursor(this, () => {\n    this.cursor.rewind();\n  });\n  return this;\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @return {Promise}\n * @api public\n * @method next\n */\n\nQueryCursor.prototype.next = async function next() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.next() no longer accepts a callback');\n  }\n  if (this._closed) {\n    throw new MongooseError('Cannot call `next()` on a closed cursor');\n  }\n  return new Promise((resolve, reject) => {\n    _next(this, function (error, doc) {\n      if (error) {\n        return reject(error);\n      }\n      resolve(doc);\n    });\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * #### Example:\n *\n *     // Iterate over documents asynchronously\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       eachAsync(async function (doc, i) {\n *         doc.foo = doc.bar + i;\n *         await doc.save();\n *       })\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Number} [options.batchSize] if set, will call `fn()` with arrays of documents with length at most `batchSize`\n * @param {Boolean} [options.continueOnError=false] if true, `eachAsync()` iterates through all docs even if `fn` throws an error. If false, `eachAsync()` throws an error immediately if the given function `fn()` throws an error.\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nQueryCursor.prototype.eachAsync = function (fn, opts) {\n  if (typeof arguments[2] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.eachAsync() no longer accepts a callback');\n  }\n  if (typeof opts === 'function') {\n    opts = {};\n  }\n  opts = opts || {};\n  return eachAsync(cb => _next(this, cb), fn, opts);\n};\n\n/**\n * The `options` passed in to the `QueryCursor` constructor.\n *\n * @api public\n * @property options\n */\n\nQueryCursor.prototype.options;\n\n/**\n * Adds a [cursor flag](https://mongodb.github.io/node-mongodb-native/4.9/classes/FindCursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nQueryCursor.prototype.addCursorFlag = function (flag, value) {\n  _waitForCursor(this, () => {\n    this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype.transformNull = function (val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype._transformForAsyncIterator = function () {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js).\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * #### Example:\n *\n *     // Works without using `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n *     // Can also use `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }]).cursor()) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method [Symbol.asyncIterator]\n * @memberOf QueryCursor\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  QueryCursor.prototype[Symbol.asyncIterator] = function () {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? {\n    done: true\n  } : {\n    value: doc,\n    done: false\n  };\n}\n\n/**\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n * @param {Any} ctx\n * @param {Function} cb\n * @api private\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function (err, doc) {\n      if (err || doc === null && !ctx._mongooseOptions.transformNull) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function (doc, fn) {\n        return fn.call(ctx, doc);\n      }, doc));\n    };\n  }\n  if (ctx._error) {\n    return immediate(function () {\n      callback(ctx._error);\n    });\n  }\n  if (ctx.skipped) {\n    return immediate(() => callback(null, null));\n  }\n  if (ctx.cursor) {\n    if (ctx.query._mongooseOptions.populate && !ctx._pop) {\n      ctx._pop = helpers.preparePopulationOptionsMQ(ctx.query, ctx.query._mongooseOptions);\n      ctx._pop.__noPromise = true;\n    }\n    if (ctx.query._mongooseOptions.populate && ctx.options._populateBatchSize > 1) {\n      if (ctx._batchDocs && ctx._batchDocs.length) {\n        // Return a cached populated doc\n        return _nextDoc(ctx, ctx._batchDocs.shift(), ctx._pop, callback);\n      } else if (ctx._batchExhausted) {\n        // Internal cursor reported no more docs. Act the same here\n        return callback(null, null);\n      } else {\n        // Request as many docs as batchSize, to populate them also in batch\n        ctx._batchDocs = [];\n        ctx.cursor.next().then(res => {\n          _onNext.call({\n            ctx,\n            callback\n          }, null, res);\n        }, err => {\n          _onNext.call({\n            ctx,\n            callback\n          }, err);\n        });\n        return;\n      }\n    } else {\n      return ctx.cursor.next().then(doc => {\n        if (!doc) {\n          callback(null, null);\n          return;\n        }\n        if (!ctx.query._mongooseOptions.populate) {\n          return _nextDoc(ctx, doc, null, callback);\n        }\n        ctx.query.model.populate(doc, ctx._pop).then(doc => {\n          _nextDoc(ctx, doc, ctx._pop, callback);\n        }, err => {\n          callback(err);\n        });\n      }, error => {\n        callback(error);\n      });\n    }\n  } else {\n    ctx.once('error', cb);\n    ctx.once('cursor', function (cursor) {\n      ctx.removeListener('error', cb);\n      if (cursor == null) {\n        if (ctx.skipped) {\n          return cb(null, null);\n        }\n        return;\n      }\n      _next(ctx, cb);\n    });\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _onNext(error, doc) {\n  if (error) {\n    return this.callback(error);\n  }\n  if (!doc) {\n    this.ctx._batchExhausted = true;\n    return _populateBatch.call(this);\n  }\n  this.ctx._batchDocs.push(doc);\n  if (this.ctx._batchDocs.length < this.ctx.options._populateBatchSize) {\n    // If both `batchSize` and `_populateBatchSize` are huge, calling `next()` repeatedly may\n    // cause a stack overflow. So make sure we clear the stack regularly.\n    if (this.ctx._batchDocs.length > 0 && this.ctx._batchDocs.length % 1000 === 0) {\n      return immediate(() => this.ctx.cursor.next().then(res => {\n        _onNext.call(this, null, res);\n      }, err => {\n        _onNext.call(this, err);\n      }));\n    }\n    this.ctx.cursor.next().then(res => {\n      _onNext.call(this, null, res);\n    }, err => {\n      _onNext.call(this, err);\n    });\n  } else {\n    _populateBatch.call(this);\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _populateBatch() {\n  if (!this.ctx._batchDocs.length) {\n    return this.callback(null, null);\n  }\n  this.ctx.query.model.populate(this.ctx._batchDocs, this.ctx._pop).then(() => {\n    _nextDoc(this.ctx, this.ctx._batchDocs.shift(), this.ctx._pop, this.callback);\n  }, err => {\n    this.callback(err);\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _nextDoc(ctx, doc, pop, callback) {\n  if (ctx.query._mongooseOptions.lean) {\n    return ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  }\n  const {\n    model,\n    _fields,\n    _userProvidedFields,\n    options\n  } = ctx.query;\n  helpers.createModelAndInit(model, doc, _fields, _userProvidedFields, options, pop, (err, doc) => {\n    if (err != null) {\n      return callback(err);\n    }\n    ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function (cursor) {\n    if (cursor == null) {\n      return;\n    }\n    cb();\n  });\n}\nmodule.exports = QueryCursor;","map":{"version":3,"names":["MongooseError","require","Readable","eachAsync","helpers","kareem","immediate","once","util","QueryCursor","query","call","autoDestroy","objectMode","cursor","skipped","_closed","model","_mongooseOptions","_transforms","options","hooks","execPre","err","skipWrappedFunction","resultValue","args","Array","isArray","length","inspect","_markError","listeners","emit","Object","assign","_optionsForExec","concat","slice","transform","push","batchSize","_populateBatchSize","Math","min","collection","_shouldBufferCommands","buffer","queue","_getRawCursor","inherits","queryCursor","find","_conditions","_error","prototype","_read","_next","error","doc","close","getDriverCursor","defineProperty","value","fn","enumerable","configurable","writable","arguments","rewind","_waitForCursor","next","Promise","resolve","reject","opts","cb","addCursorFlag","flag","transformNull","val","_transformForAsyncIterator","indexOf","map","Symbol","asyncIterator","done","ctx","callback","reduce","populate","_pop","preparePopulationOptionsMQ","__noPromise","_batchDocs","_nextDoc","shift","_batchExhausted","then","res","_onNext","removeListener","_populateBatch","pop","lean","execPost","_fields","_userProvidedFields","createModelAndInit","module","exports"],"sources":["E:/Out/my-outpass/node_modules/mongoose/lib/cursor/queryCursor.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('../error/mongooseError');\nconst Readable = require('stream').Readable;\nconst eachAsync = require('../helpers/cursor/eachAsync');\nconst helpers = require('../queryHelpers');\nconst kareem = require('kareem');\nconst immediate = require('../helpers/immediate');\nconst { once } = require('node:events');\nconst util = require('util');\n\n/**\n * A QueryCursor is a concurrency primitive for processing query results\n * one document at a time. A QueryCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * QueryCursors execute the model's pre `find` hooks before loading any documents\n * from MongoDB, and the model's post `find` hooks after loading each document.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Query#cursor()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.cursor()) instead.\n *\n * @param {Query} query\n * @param {Object} options query options passed to `.find()`\n * @inherits Readable https://nodejs.org/api/stream.html#class-streamreadable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction QueryCursor(query) {\n  // set autoDestroy=true because on node 12 it's by default false\n  // gh-10902 need autoDestroy to destroy correctly and emit 'close' event\n  Readable.call(this, { autoDestroy: true, objectMode: true });\n\n  this.cursor = null;\n  this.skipped = false;\n  this.query = query;\n  this._closed = false;\n  const model = query.model;\n  this._mongooseOptions = {};\n  this._transforms = [];\n  this.model = model;\n  this.options = {};\n  model.hooks.execPre('find', query, (err) => {\n    if (err != null) {\n      if (err instanceof kareem.skipWrappedFunction) {\n        const resultValue = err.args[0];\n        if (resultValue != null && (!Array.isArray(resultValue) || resultValue.length)) {\n          const err = new MongooseError(\n            'Cannot `skipMiddlewareFunction()` with a value when using ' +\n            '`.find().cursor()`, value must be nullish or empty array, got \"' +\n            util.inspect(resultValue) +\n            '\".'\n          );\n          this._markError(err);\n          this.listeners('error').length > 0 && this.emit('error', err);\n          return;\n        }\n        this.skipped = true;\n        this.emit('cursor', null);\n        return;\n      }\n      this._markError(err);\n      this.listeners('error').length > 0 && this.emit('error', err);\n      return;\n    }\n    Object.assign(this.options, query._optionsForExec());\n    this._transforms = this._transforms.concat(query._transforms.slice());\n    if (this.options.transform) {\n      this._transforms.push(this.options.transform);\n    }\n    // Re: gh-8039, you need to set the `cursor.batchSize` option, top-level\n    // `batchSize` option doesn't work.\n    if (this.options.batchSize) {\n      // Max out the number of documents we'll populate in parallel at 5000.\n      this.options._populateBatchSize = Math.min(this.options.batchSize, 5000);\n    }\n\n    if (model.collection._shouldBufferCommands() && model.collection.buffer) {\n      model.collection.queue.push([\n        () => _getRawCursor(query, this)\n      ]);\n    } else {\n      _getRawCursor(query, this);\n    }\n  });\n}\n\nutil.inherits(QueryCursor, Readable);\n\n/*!\n * ignore\n */\n\nfunction _getRawCursor(query, queryCursor) {\n  try {\n    const cursor = query.model.collection.find(query._conditions, queryCursor.options);\n    queryCursor.cursor = cursor;\n    queryCursor.emit('cursor', cursor);\n  } catch (err) {\n    queryCursor._markError(err);\n    queryCursor.listeners('error').length > 0 && queryCursor.emit('error', queryCursor._error);\n  }\n}\n\n/**\n * Necessary to satisfy the Readable API\n * @method _read\n * @memberOf QueryCursor\n * @instance\n * @api private\n */\n\nQueryCursor.prototype._read = function() {\n  _next(this, (error, doc) => {\n    if (error) {\n      return this.emit('error', error);\n    }\n    if (!doc) {\n      this.push(null);\n      this.cursor.close(function(error) {\n        if (error) {\n          return this.emit('error', error);\n        }\n      });\n      return;\n    }\n    this.push(doc);\n  });\n};\n\n/**\n * Returns the underlying cursor from the MongoDB Node driver that this cursor uses.\n *\n * @method getDriverCursor\n * @memberOf QueryCursor\n * @returns {Cursor} MongoDB Node driver cursor instance\n * @instance\n * @api public\n */\n\nQueryCursor.prototype.getDriverCursor = async function getDriverCursor() {\n  if (this.cursor) {\n    return this.cursor;\n  }\n\n  await once(this, 'cursor');\n  return this.cursor;\n};\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * #### Example:\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {QueryCursor}\n * @memberOf QueryCursor\n * @api public\n * @method map\n */\n\nObject.defineProperty(QueryCursor.prototype, 'map', {\n  value: function(fn) {\n    this._transforms.push(fn);\n    return this;\n  },\n  enumerable: true,\n  configurable: true,\n  writable: true\n});\n\n/**\n * Marks this cursor as errored\n * @method _markError\n * @memberOf QueryCursor\n * @instance\n * @api private\n */\n\nQueryCursor.prototype._markError = function(error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see AggregationCursor.close https://mongodb.github.io/node-mongodb-native/4.9/classes/AggregationCursor.html#close\n */\n\nQueryCursor.prototype.close = async function close() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.close() no longer accepts a callback');\n  }\n  try {\n    await this.cursor.close();\n    this._closed = true;\n    this.emit('close');\n  } catch (error) {\n    this.listeners('error').length > 0 && this.emit('error', error);\n    throw error;\n  }\n};\n\n/**\n * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n * if the resultant data has already been retrieved by this cursor.\n *\n * @return {AggregationCursor} this\n * @api public\n * @method rewind\n */\n\nQueryCursor.prototype.rewind = function() {\n  _waitForCursor(this, () => {\n    this.cursor.rewind();\n  });\n  return this;\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @return {Promise}\n * @api public\n * @method next\n */\n\nQueryCursor.prototype.next = async function next() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.next() no longer accepts a callback');\n  }\n  if (this._closed) {\n    throw new MongooseError('Cannot call `next()` on a closed cursor');\n  }\n  return new Promise((resolve, reject) => {\n    _next(this, function(error, doc) {\n      if (error) {\n        return reject(error);\n      }\n      resolve(doc);\n    });\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * #### Example:\n *\n *     // Iterate over documents asynchronously\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       eachAsync(async function (doc, i) {\n *         doc.foo = doc.bar + i;\n *         await doc.save();\n *       })\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Number} [options.batchSize] if set, will call `fn()` with arrays of documents with length at most `batchSize`\n * @param {Boolean} [options.continueOnError=false] if true, `eachAsync()` iterates through all docs even if `fn` throws an error. If false, `eachAsync()` throws an error immediately if the given function `fn()` throws an error.\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nQueryCursor.prototype.eachAsync = function(fn, opts) {\n  if (typeof arguments[2] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.eachAsync() no longer accepts a callback');\n  }\n  if (typeof opts === 'function') {\n    opts = {};\n  }\n  opts = opts || {};\n\n  return eachAsync((cb) => _next(this, cb), fn, opts);\n};\n\n/**\n * The `options` passed in to the `QueryCursor` constructor.\n *\n * @api public\n * @property options\n */\n\nQueryCursor.prototype.options;\n\n/**\n * Adds a [cursor flag](https://mongodb.github.io/node-mongodb-native/4.9/classes/FindCursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nQueryCursor.prototype.addCursorFlag = function(flag, value) {\n  _waitForCursor(this, () => {\n    this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype.transformNull = function(val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype._transformForAsyncIterator = function() {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js).\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * #### Example:\n *\n *     // Works without using `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n *     // Can also use `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }]).cursor()) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method [Symbol.asyncIterator]\n * @memberOf QueryCursor\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  QueryCursor.prototype[Symbol.asyncIterator] = function() {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? { done: true } : { value: doc, done: false };\n}\n\n/**\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n * @param {Any} ctx\n * @param {Function} cb\n * @api private\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function(err, doc) {\n      if (err || (doc === null && !ctx._mongooseOptions.transformNull)) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function(doc, fn) {\n        return fn.call(ctx, doc);\n      }, doc));\n    };\n  }\n\n  if (ctx._error) {\n    return immediate(function() {\n      callback(ctx._error);\n    });\n  }\n  if (ctx.skipped) {\n    return immediate(() => callback(null, null));\n  }\n\n  if (ctx.cursor) {\n    if (ctx.query._mongooseOptions.populate && !ctx._pop) {\n      ctx._pop = helpers.preparePopulationOptionsMQ(ctx.query,\n        ctx.query._mongooseOptions);\n      ctx._pop.__noPromise = true;\n    }\n    if (ctx.query._mongooseOptions.populate && ctx.options._populateBatchSize > 1) {\n      if (ctx._batchDocs && ctx._batchDocs.length) {\n        // Return a cached populated doc\n        return _nextDoc(ctx, ctx._batchDocs.shift(), ctx._pop, callback);\n      } else if (ctx._batchExhausted) {\n        // Internal cursor reported no more docs. Act the same here\n        return callback(null, null);\n      } else {\n        // Request as many docs as batchSize, to populate them also in batch\n        ctx._batchDocs = [];\n        ctx.cursor.next().then(\n          res => { _onNext.call({ ctx, callback }, null, res); },\n          err => { _onNext.call({ ctx, callback }, err); }\n        );\n        return;\n      }\n    } else {\n      return ctx.cursor.next().then(\n        doc => {\n          if (!doc) {\n            callback(null, null);\n            return;\n          }\n\n          if (!ctx.query._mongooseOptions.populate) {\n            return _nextDoc(ctx, doc, null, callback);\n          }\n\n          ctx.query.model.populate(doc, ctx._pop).then(\n            doc => {\n              _nextDoc(ctx, doc, ctx._pop, callback);\n            },\n            err => {\n              callback(err);\n            }\n          );\n        },\n        error => {\n          callback(error);\n        }\n      );\n    }\n  } else {\n    ctx.once('error', cb);\n\n    ctx.once('cursor', function(cursor) {\n      ctx.removeListener('error', cb);\n      if (cursor == null) {\n        if (ctx.skipped) {\n          return cb(null, null);\n        }\n        return;\n      }\n      _next(ctx, cb);\n    });\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _onNext(error, doc) {\n  if (error) {\n    return this.callback(error);\n  }\n  if (!doc) {\n    this.ctx._batchExhausted = true;\n    return _populateBatch.call(this);\n  }\n\n  this.ctx._batchDocs.push(doc);\n\n  if (this.ctx._batchDocs.length < this.ctx.options._populateBatchSize) {\n    // If both `batchSize` and `_populateBatchSize` are huge, calling `next()` repeatedly may\n    // cause a stack overflow. So make sure we clear the stack regularly.\n    if (this.ctx._batchDocs.length > 0 && this.ctx._batchDocs.length % 1000 === 0) {\n      return immediate(() => this.ctx.cursor.next().then(\n        res => { _onNext.call(this, null, res); },\n        err => { _onNext.call(this, err); }\n      ));\n    }\n    this.ctx.cursor.next().then(\n      res => { _onNext.call(this, null, res); },\n      err => { _onNext.call(this, err); }\n    );\n  } else {\n    _populateBatch.call(this);\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _populateBatch() {\n  if (!this.ctx._batchDocs.length) {\n    return this.callback(null, null);\n  }\n  this.ctx.query.model.populate(this.ctx._batchDocs, this.ctx._pop).then(\n    () => {\n      _nextDoc(this.ctx, this.ctx._batchDocs.shift(), this.ctx._pop, this.callback);\n    },\n    err => {\n      this.callback(err);\n    }\n  );\n}\n\n/*!\n * ignore\n */\n\nfunction _nextDoc(ctx, doc, pop, callback) {\n  if (ctx.query._mongooseOptions.lean) {\n    return ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  }\n\n  const { model, _fields, _userProvidedFields, options } = ctx.query;\n  helpers.createModelAndInit(model, doc, _fields, _userProvidedFields, options, pop, (err, doc) => {\n    if (err != null) {\n      return callback(err);\n    }\n    ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function(cursor) {\n    if (cursor == null) {\n      return;\n    }\n    cb();\n  });\n}\n\nmodule.exports = QueryCursor;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACvD,MAAMC,QAAQ,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAACC,QAAQ;AAC3C,MAAMC,SAAS,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AACxD,MAAMG,OAAO,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAC1C,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMK,SAAS,GAAGL,OAAO,CAAC,sBAAsB,CAAC;AACjD,MAAM;EAAEM;AAAK,CAAC,GAAGN,OAAO,CAAC,aAAa,CAAC;AACvC,MAAMO,IAAI,GAAGP,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASQ,WAAWA,CAACC,KAAK,EAAE;EAC1B;EACA;EACAR,QAAQ,CAACS,IAAI,CAAC,IAAI,EAAE;IAAEC,WAAW,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAK,CAAC,CAAC;EAE5D,IAAI,CAACC,MAAM,GAAG,IAAI;EAClB,IAAI,CAACC,OAAO,GAAG,KAAK;EACpB,IAAI,CAACL,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACM,OAAO,GAAG,KAAK;EACpB,MAAMC,KAAK,GAAGP,KAAK,CAACO,KAAK;EACzB,IAAI,CAACC,gBAAgB,GAAG,CAAC,CAAC;EAC1B,IAAI,CAACC,WAAW,GAAG,EAAE;EACrB,IAAI,CAACF,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACG,OAAO,GAAG,CAAC,CAAC;EACjBH,KAAK,CAACI,KAAK,CAACC,OAAO,CAAC,MAAM,EAAEZ,KAAK,EAAGa,GAAG,IAAK;IAC1C,IAAIA,GAAG,IAAI,IAAI,EAAE;MACf,IAAIA,GAAG,YAAYlB,MAAM,CAACmB,mBAAmB,EAAE;QAC7C,MAAMC,WAAW,GAAGF,GAAG,CAACG,IAAI,CAAC,CAAC,CAAC;QAC/B,IAAID,WAAW,IAAI,IAAI,KAAK,CAACE,KAAK,CAACC,OAAO,CAACH,WAAW,CAAC,IAAIA,WAAW,CAACI,MAAM,CAAC,EAAE;UAC9E,MAAMN,GAAG,GAAG,IAAIvB,aAAa,CAC3B,4DAA4D,GAC5D,iEAAiE,GACjEQ,IAAI,CAACsB,OAAO,CAACL,WAAW,CAAC,GACzB,IACF,CAAC;UACD,IAAI,CAACM,UAAU,CAACR,GAAG,CAAC;UACpB,IAAI,CAACS,SAAS,CAAC,OAAO,CAAC,CAACH,MAAM,GAAG,CAAC,IAAI,IAAI,CAACI,IAAI,CAAC,OAAO,EAAEV,GAAG,CAAC;UAC7D;QACF;QACA,IAAI,CAACR,OAAO,GAAG,IAAI;QACnB,IAAI,CAACkB,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;QACzB;MACF;MACA,IAAI,CAACF,UAAU,CAACR,GAAG,CAAC;MACpB,IAAI,CAACS,SAAS,CAAC,OAAO,CAAC,CAACH,MAAM,GAAG,CAAC,IAAI,IAAI,CAACI,IAAI,CAAC,OAAO,EAAEV,GAAG,CAAC;MAC7D;IACF;IACAW,MAAM,CAACC,MAAM,CAAC,IAAI,CAACf,OAAO,EAAEV,KAAK,CAAC0B,eAAe,CAAC,CAAC,CAAC;IACpD,IAAI,CAACjB,WAAW,GAAG,IAAI,CAACA,WAAW,CAACkB,MAAM,CAAC3B,KAAK,CAACS,WAAW,CAACmB,KAAK,CAAC,CAAC,CAAC;IACrE,IAAI,IAAI,CAAClB,OAAO,CAACmB,SAAS,EAAE;MAC1B,IAAI,CAACpB,WAAW,CAACqB,IAAI,CAAC,IAAI,CAACpB,OAAO,CAACmB,SAAS,CAAC;IAC/C;IACA;IACA;IACA,IAAI,IAAI,CAACnB,OAAO,CAACqB,SAAS,EAAE;MAC1B;MACA,IAAI,CAACrB,OAAO,CAACsB,kBAAkB,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACxB,OAAO,CAACqB,SAAS,EAAE,IAAI,CAAC;IAC1E;IAEA,IAAIxB,KAAK,CAAC4B,UAAU,CAACC,qBAAqB,CAAC,CAAC,IAAI7B,KAAK,CAAC4B,UAAU,CAACE,MAAM,EAAE;MACvE9B,KAAK,CAAC4B,UAAU,CAACG,KAAK,CAACR,IAAI,CAAC,CAC1B,MAAMS,aAAa,CAACvC,KAAK,EAAE,IAAI,CAAC,CACjC,CAAC;IACJ,CAAC,MAAM;MACLuC,aAAa,CAACvC,KAAK,EAAE,IAAI,CAAC;IAC5B;EACF,CAAC,CAAC;AACJ;AAEAF,IAAI,CAAC0C,QAAQ,CAACzC,WAAW,EAAEP,QAAQ,CAAC;;AAEpC;AACA;AACA;;AAEA,SAAS+C,aAAaA,CAACvC,KAAK,EAAEyC,WAAW,EAAE;EACzC,IAAI;IACF,MAAMrC,MAAM,GAAGJ,KAAK,CAACO,KAAK,CAAC4B,UAAU,CAACO,IAAI,CAAC1C,KAAK,CAAC2C,WAAW,EAAEF,WAAW,CAAC/B,OAAO,CAAC;IAClF+B,WAAW,CAACrC,MAAM,GAAGA,MAAM;IAC3BqC,WAAW,CAAClB,IAAI,CAAC,QAAQ,EAAEnB,MAAM,CAAC;EACpC,CAAC,CAAC,OAAOS,GAAG,EAAE;IACZ4B,WAAW,CAACpB,UAAU,CAACR,GAAG,CAAC;IAC3B4B,WAAW,CAACnB,SAAS,CAAC,OAAO,CAAC,CAACH,MAAM,GAAG,CAAC,IAAIsB,WAAW,CAAClB,IAAI,CAAC,OAAO,EAAEkB,WAAW,CAACG,MAAM,CAAC;EAC5F;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA7C,WAAW,CAAC8C,SAAS,CAACC,KAAK,GAAG,YAAW;EACvCC,KAAK,CAAC,IAAI,EAAE,CAACC,KAAK,EAAEC,GAAG,KAAK;IAC1B,IAAID,KAAK,EAAE;MACT,OAAO,IAAI,CAACzB,IAAI,CAAC,OAAO,EAAEyB,KAAK,CAAC;IAClC;IACA,IAAI,CAACC,GAAG,EAAE;MACR,IAAI,CAACnB,IAAI,CAAC,IAAI,CAAC;MACf,IAAI,CAAC1B,MAAM,CAAC8C,KAAK,CAAC,UAASF,KAAK,EAAE;QAChC,IAAIA,KAAK,EAAE;UACT,OAAO,IAAI,CAACzB,IAAI,CAAC,OAAO,EAAEyB,KAAK,CAAC;QAClC;MACF,CAAC,CAAC;MACF;IACF;IACA,IAAI,CAAClB,IAAI,CAACmB,GAAG,CAAC;EAChB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAlD,WAAW,CAAC8C,SAAS,CAACM,eAAe,GAAG,eAAeA,eAAeA,CAAA,EAAG;EACvE,IAAI,IAAI,CAAC/C,MAAM,EAAE;IACf,OAAO,IAAI,CAACA,MAAM;EACpB;EAEA,MAAMP,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC;EAC1B,OAAO,IAAI,CAACO,MAAM;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAoB,MAAM,CAAC4B,cAAc,CAACrD,WAAW,CAAC8C,SAAS,EAAE,KAAK,EAAE;EAClDQ,KAAK,EAAE,SAAAA,CAASC,EAAE,EAAE;IAClB,IAAI,CAAC7C,WAAW,CAACqB,IAAI,CAACwB,EAAE,CAAC;IACzB,OAAO,IAAI;EACb,CAAC;EACDC,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE,IAAI;EAClBC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA1D,WAAW,CAAC8C,SAAS,CAACxB,UAAU,GAAG,UAAS2B,KAAK,EAAE;EACjD,IAAI,CAACJ,MAAM,GAAGI,KAAK;EACnB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAjD,WAAW,CAAC8C,SAAS,CAACK,KAAK,GAAG,eAAeA,KAAKA,CAAA,EAAG;EACnD,IAAI,OAAOQ,SAAS,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;IACtC,MAAM,IAAIpE,aAAa,CAAC,4DAA4D,CAAC;EACvF;EACA,IAAI;IACF,MAAM,IAAI,CAACc,MAAM,CAAC8C,KAAK,CAAC,CAAC;IACzB,IAAI,CAAC5C,OAAO,GAAG,IAAI;IACnB,IAAI,CAACiB,IAAI,CAAC,OAAO,CAAC;EACpB,CAAC,CAAC,OAAOyB,KAAK,EAAE;IACd,IAAI,CAAC1B,SAAS,CAAC,OAAO,CAAC,CAACH,MAAM,GAAG,CAAC,IAAI,IAAI,CAACI,IAAI,CAAC,OAAO,EAAEyB,KAAK,CAAC;IAC/D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAjD,WAAW,CAAC8C,SAAS,CAACc,MAAM,GAAG,YAAW;EACxCC,cAAc,CAAC,IAAI,EAAE,MAAM;IACzB,IAAI,CAACxD,MAAM,CAACuD,MAAM,CAAC,CAAC;EACtB,CAAC,CAAC;EACF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA5D,WAAW,CAAC8C,SAAS,CAACgB,IAAI,GAAG,eAAeA,IAAIA,CAAA,EAAG;EACjD,IAAI,OAAOH,SAAS,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;IACtC,MAAM,IAAIpE,aAAa,CAAC,2DAA2D,CAAC;EACtF;EACA,IAAI,IAAI,CAACgB,OAAO,EAAE;IAChB,MAAM,IAAIhB,aAAa,CAAC,yCAAyC,CAAC;EACpE;EACA,OAAO,IAAIwE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCjB,KAAK,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;MAC/B,IAAID,KAAK,EAAE;QACT,OAAOgB,MAAM,CAAChB,KAAK,CAAC;MACtB;MACAe,OAAO,CAACd,GAAG,CAAC;IACd,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAlD,WAAW,CAAC8C,SAAS,CAACpD,SAAS,GAAG,UAAS6D,EAAE,EAAEW,IAAI,EAAE;EACnD,IAAI,OAAOP,SAAS,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;IACtC,MAAM,IAAIpE,aAAa,CAAC,gEAAgE,CAAC;EAC3F;EACA,IAAI,OAAO2E,IAAI,KAAK,UAAU,EAAE;IAC9BA,IAAI,GAAG,CAAC,CAAC;EACX;EACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EAEjB,OAAOxE,SAAS,CAAEyE,EAAE,IAAKnB,KAAK,CAAC,IAAI,EAAEmB,EAAE,CAAC,EAAEZ,EAAE,EAAEW,IAAI,CAAC;AACrD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEAlE,WAAW,CAAC8C,SAAS,CAACnC,OAAO;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAX,WAAW,CAAC8C,SAAS,CAACsB,aAAa,GAAG,UAASC,IAAI,EAAEf,KAAK,EAAE;EAC1DO,cAAc,CAAC,IAAI,EAAE,MAAM;IACzB,IAAI,CAACxD,MAAM,CAAC+D,aAAa,CAACC,IAAI,EAAEf,KAAK,CAAC;EACxC,CAAC,CAAC;EACF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;;AAEAtD,WAAW,CAAC8C,SAAS,CAACwB,aAAa,GAAG,UAASC,GAAG,EAAE;EAClD,IAAIZ,SAAS,CAACvC,MAAM,KAAK,CAAC,EAAE;IAC1BmD,GAAG,GAAG,IAAI;EACZ;EACA,IAAI,CAAC9D,gBAAgB,CAAC6D,aAAa,GAAGC,GAAG;EACzC,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;;AAEAvE,WAAW,CAAC8C,SAAS,CAAC0B,0BAA0B,GAAG,YAAW;EAC5D,IAAI,IAAI,CAAC9D,WAAW,CAAC+D,OAAO,CAACD,0BAA0B,CAAC,KAAK,CAAC,CAAC,EAAE;IAC/D,IAAI,CAACE,GAAG,CAACF,0BAA0B,CAAC;EACtC;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIG,MAAM,CAACC,aAAa,IAAI,IAAI,EAAE;EAChC5E,WAAW,CAAC8C,SAAS,CAAC6B,MAAM,CAACC,aAAa,CAAC,GAAG,YAAW;IACvD,OAAO,IAAI,CAACN,aAAa,CAAC,CAAC,CAACE,0BAA0B,CAAC,CAAC;EAC1D,CAAC;AACH;;AAEA;AACA;AACA;;AAEA,SAASA,0BAA0BA,CAACtB,GAAG,EAAE;EACvC,OAAOA,GAAG,IAAI,IAAI,GAAG;IAAE2B,IAAI,EAAE;EAAK,CAAC,GAAG;IAAEvB,KAAK,EAAEJ,GAAG;IAAE2B,IAAI,EAAE;EAAM,CAAC;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS7B,KAAKA,CAAC8B,GAAG,EAAEX,EAAE,EAAE;EACtB,IAAIY,QAAQ,GAAGZ,EAAE;EACjB,IAAIW,GAAG,CAACpE,WAAW,CAACU,MAAM,EAAE;IAC1B2D,QAAQ,GAAG,SAAAA,CAASjE,GAAG,EAAEoC,GAAG,EAAE;MAC5B,IAAIpC,GAAG,IAAKoC,GAAG,KAAK,IAAI,IAAI,CAAC4B,GAAG,CAACrE,gBAAgB,CAAC6D,aAAc,EAAE;QAChE,OAAOH,EAAE,CAACrD,GAAG,EAAEoC,GAAG,CAAC;MACrB;MACAiB,EAAE,CAACrD,GAAG,EAAEgE,GAAG,CAACpE,WAAW,CAACsE,MAAM,CAAC,UAAS9B,GAAG,EAAEK,EAAE,EAAE;QAC/C,OAAOA,EAAE,CAACrD,IAAI,CAAC4E,GAAG,EAAE5B,GAAG,CAAC;MAC1B,CAAC,EAAEA,GAAG,CAAC,CAAC;IACV,CAAC;EACH;EAEA,IAAI4B,GAAG,CAACjC,MAAM,EAAE;IACd,OAAOhD,SAAS,CAAC,YAAW;MAC1BkF,QAAQ,CAACD,GAAG,CAACjC,MAAM,CAAC;IACtB,CAAC,CAAC;EACJ;EACA,IAAIiC,GAAG,CAACxE,OAAO,EAAE;IACf,OAAOT,SAAS,CAAC,MAAMkF,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;EAC9C;EAEA,IAAID,GAAG,CAACzE,MAAM,EAAE;IACd,IAAIyE,GAAG,CAAC7E,KAAK,CAACQ,gBAAgB,CAACwE,QAAQ,IAAI,CAACH,GAAG,CAACI,IAAI,EAAE;MACpDJ,GAAG,CAACI,IAAI,GAAGvF,OAAO,CAACwF,0BAA0B,CAACL,GAAG,CAAC7E,KAAK,EACrD6E,GAAG,CAAC7E,KAAK,CAACQ,gBAAgB,CAAC;MAC7BqE,GAAG,CAACI,IAAI,CAACE,WAAW,GAAG,IAAI;IAC7B;IACA,IAAIN,GAAG,CAAC7E,KAAK,CAACQ,gBAAgB,CAACwE,QAAQ,IAAIH,GAAG,CAACnE,OAAO,CAACsB,kBAAkB,GAAG,CAAC,EAAE;MAC7E,IAAI6C,GAAG,CAACO,UAAU,IAAIP,GAAG,CAACO,UAAU,CAACjE,MAAM,EAAE;QAC3C;QACA,OAAOkE,QAAQ,CAACR,GAAG,EAAEA,GAAG,CAACO,UAAU,CAACE,KAAK,CAAC,CAAC,EAAET,GAAG,CAACI,IAAI,EAAEH,QAAQ,CAAC;MAClE,CAAC,MAAM,IAAID,GAAG,CAACU,eAAe,EAAE;QAC9B;QACA,OAAOT,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;MAC7B,CAAC,MAAM;QACL;QACAD,GAAG,CAACO,UAAU,GAAG,EAAE;QACnBP,GAAG,CAACzE,MAAM,CAACyD,IAAI,CAAC,CAAC,CAAC2B,IAAI,CACpBC,GAAG,IAAI;UAAEC,OAAO,CAACzF,IAAI,CAAC;YAAE4E,GAAG;YAAEC;UAAS,CAAC,EAAE,IAAI,EAAEW,GAAG,CAAC;QAAE,CAAC,EACtD5E,GAAG,IAAI;UAAE6E,OAAO,CAACzF,IAAI,CAAC;YAAE4E,GAAG;YAAEC;UAAS,CAAC,EAAEjE,GAAG,CAAC;QAAE,CACjD,CAAC;QACD;MACF;IACF,CAAC,MAAM;MACL,OAAOgE,GAAG,CAACzE,MAAM,CAACyD,IAAI,CAAC,CAAC,CAAC2B,IAAI,CAC3BvC,GAAG,IAAI;QACL,IAAI,CAACA,GAAG,EAAE;UACR6B,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;UACpB;QACF;QAEA,IAAI,CAACD,GAAG,CAAC7E,KAAK,CAACQ,gBAAgB,CAACwE,QAAQ,EAAE;UACxC,OAAOK,QAAQ,CAACR,GAAG,EAAE5B,GAAG,EAAE,IAAI,EAAE6B,QAAQ,CAAC;QAC3C;QAEAD,GAAG,CAAC7E,KAAK,CAACO,KAAK,CAACyE,QAAQ,CAAC/B,GAAG,EAAE4B,GAAG,CAACI,IAAI,CAAC,CAACO,IAAI,CAC1CvC,GAAG,IAAI;UACLoC,QAAQ,CAACR,GAAG,EAAE5B,GAAG,EAAE4B,GAAG,CAACI,IAAI,EAAEH,QAAQ,CAAC;QACxC,CAAC,EACDjE,GAAG,IAAI;UACLiE,QAAQ,CAACjE,GAAG,CAAC;QACf,CACF,CAAC;MACH,CAAC,EACDmC,KAAK,IAAI;QACP8B,QAAQ,CAAC9B,KAAK,CAAC;MACjB,CACF,CAAC;IACH;EACF,CAAC,MAAM;IACL6B,GAAG,CAAChF,IAAI,CAAC,OAAO,EAAEqE,EAAE,CAAC;IAErBW,GAAG,CAAChF,IAAI,CAAC,QAAQ,EAAE,UAASO,MAAM,EAAE;MAClCyE,GAAG,CAACc,cAAc,CAAC,OAAO,EAAEzB,EAAE,CAAC;MAC/B,IAAI9D,MAAM,IAAI,IAAI,EAAE;QAClB,IAAIyE,GAAG,CAACxE,OAAO,EAAE;UACf,OAAO6D,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;QACvB;QACA;MACF;MACAnB,KAAK,CAAC8B,GAAG,EAAEX,EAAE,CAAC;IAChB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;;AAEA,SAASwB,OAAOA,CAAC1C,KAAK,EAAEC,GAAG,EAAE;EAC3B,IAAID,KAAK,EAAE;IACT,OAAO,IAAI,CAAC8B,QAAQ,CAAC9B,KAAK,CAAC;EAC7B;EACA,IAAI,CAACC,GAAG,EAAE;IACR,IAAI,CAAC4B,GAAG,CAACU,eAAe,GAAG,IAAI;IAC/B,OAAOK,cAAc,CAAC3F,IAAI,CAAC,IAAI,CAAC;EAClC;EAEA,IAAI,CAAC4E,GAAG,CAACO,UAAU,CAACtD,IAAI,CAACmB,GAAG,CAAC;EAE7B,IAAI,IAAI,CAAC4B,GAAG,CAACO,UAAU,CAACjE,MAAM,GAAG,IAAI,CAAC0D,GAAG,CAACnE,OAAO,CAACsB,kBAAkB,EAAE;IACpE;IACA;IACA,IAAI,IAAI,CAAC6C,GAAG,CAACO,UAAU,CAACjE,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC0D,GAAG,CAACO,UAAU,CAACjE,MAAM,GAAG,IAAI,KAAK,CAAC,EAAE;MAC7E,OAAOvB,SAAS,CAAC,MAAM,IAAI,CAACiF,GAAG,CAACzE,MAAM,CAACyD,IAAI,CAAC,CAAC,CAAC2B,IAAI,CAChDC,GAAG,IAAI;QAAEC,OAAO,CAACzF,IAAI,CAAC,IAAI,EAAE,IAAI,EAAEwF,GAAG,CAAC;MAAE,CAAC,EACzC5E,GAAG,IAAI;QAAE6E,OAAO,CAACzF,IAAI,CAAC,IAAI,EAAEY,GAAG,CAAC;MAAE,CACpC,CAAC,CAAC;IACJ;IACA,IAAI,CAACgE,GAAG,CAACzE,MAAM,CAACyD,IAAI,CAAC,CAAC,CAAC2B,IAAI,CACzBC,GAAG,IAAI;MAAEC,OAAO,CAACzF,IAAI,CAAC,IAAI,EAAE,IAAI,EAAEwF,GAAG,CAAC;IAAE,CAAC,EACzC5E,GAAG,IAAI;MAAE6E,OAAO,CAACzF,IAAI,CAAC,IAAI,EAAEY,GAAG,CAAC;IAAE,CACpC,CAAC;EACH,CAAC,MAAM;IACL+E,cAAc,CAAC3F,IAAI,CAAC,IAAI,CAAC;EAC3B;AACF;;AAEA;AACA;AACA;;AAEA,SAAS2F,cAAcA,CAAA,EAAG;EACxB,IAAI,CAAC,IAAI,CAACf,GAAG,CAACO,UAAU,CAACjE,MAAM,EAAE;IAC/B,OAAO,IAAI,CAAC2D,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;EAClC;EACA,IAAI,CAACD,GAAG,CAAC7E,KAAK,CAACO,KAAK,CAACyE,QAAQ,CAAC,IAAI,CAACH,GAAG,CAACO,UAAU,EAAE,IAAI,CAACP,GAAG,CAACI,IAAI,CAAC,CAACO,IAAI,CACpE,MAAM;IACJH,QAAQ,CAAC,IAAI,CAACR,GAAG,EAAE,IAAI,CAACA,GAAG,CAACO,UAAU,CAACE,KAAK,CAAC,CAAC,EAAE,IAAI,CAACT,GAAG,CAACI,IAAI,EAAE,IAAI,CAACH,QAAQ,CAAC;EAC/E,CAAC,EACDjE,GAAG,IAAI;IACL,IAAI,CAACiE,QAAQ,CAACjE,GAAG,CAAC;EACpB,CACF,CAAC;AACH;;AAEA;AACA;AACA;;AAEA,SAASwE,QAAQA,CAACR,GAAG,EAAE5B,GAAG,EAAE4C,GAAG,EAAEf,QAAQ,EAAE;EACzC,IAAID,GAAG,CAAC7E,KAAK,CAACQ,gBAAgB,CAACsF,IAAI,EAAE;IACnC,OAAOjB,GAAG,CAACtE,KAAK,CAACI,KAAK,CAACoF,QAAQ,CAAC,MAAM,EAAElB,GAAG,CAAC7E,KAAK,EAAE,CAAC,CAACiD,GAAG,CAAC,CAAC,EAAEpC,GAAG,IAAI;MACjE,IAAIA,GAAG,IAAI,IAAI,EAAE;QACf,OAAOiE,QAAQ,CAACjE,GAAG,CAAC;MACtB;MACAiE,QAAQ,CAAC,IAAI,EAAE7B,GAAG,CAAC;IACrB,CAAC,CAAC;EACJ;EAEA,MAAM;IAAE1C,KAAK;IAAEyF,OAAO;IAAEC,mBAAmB;IAAEvF;EAAQ,CAAC,GAAGmE,GAAG,CAAC7E,KAAK;EAClEN,OAAO,CAACwG,kBAAkB,CAAC3F,KAAK,EAAE0C,GAAG,EAAE+C,OAAO,EAAEC,mBAAmB,EAAEvF,OAAO,EAAEmF,GAAG,EAAE,CAAChF,GAAG,EAAEoC,GAAG,KAAK;IAC/F,IAAIpC,GAAG,IAAI,IAAI,EAAE;MACf,OAAOiE,QAAQ,CAACjE,GAAG,CAAC;IACtB;IACAgE,GAAG,CAACtE,KAAK,CAACI,KAAK,CAACoF,QAAQ,CAAC,MAAM,EAAElB,GAAG,CAAC7E,KAAK,EAAE,CAAC,CAACiD,GAAG,CAAC,CAAC,EAAEpC,GAAG,IAAI;MAC1D,IAAIA,GAAG,IAAI,IAAI,EAAE;QACf,OAAOiE,QAAQ,CAACjE,GAAG,CAAC;MACtB;MACAiE,QAAQ,CAAC,IAAI,EAAE7B,GAAG,CAAC;IACrB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;;AAEA,SAASW,cAAcA,CAACiB,GAAG,EAAEX,EAAE,EAAE;EAC/B,IAAIW,GAAG,CAACzE,MAAM,EAAE;IACd,OAAO8D,EAAE,CAAC,CAAC;EACb;EACAW,GAAG,CAAChF,IAAI,CAAC,QAAQ,EAAE,UAASO,MAAM,EAAE;IAClC,IAAIA,MAAM,IAAI,IAAI,EAAE;MAClB;IACF;IACA8D,EAAE,CAAC,CAAC;EACN,CAAC,CAAC;AACJ;AAEAiC,MAAM,CAACC,OAAO,GAAGrG,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}