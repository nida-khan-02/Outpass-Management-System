{"ast":null,"code":"var _jsxFileName = \"E:\\\\Out\\\\my-outpass\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport axios from 'axios';\nimport Login from './Components/Login';\n// import StudentDashboard from './Components/StudentDashboard';\n// import WardenDashboard from './Components/WardenDashboard';\nimport { AuthProvider } from './contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  // const [hostelName, setHostelName] = useState(null);\n\n  // Function to check if the user is authenticated\n  const checkAuthentication = () => {\n    const token = localStorage.getItem('token');\n    return token !== null;\n  };\n\n  // Function to fetch the user's hostelName once they are logged in\n  const fetchHostelName = async () => {\n    //  // Fetch the user's hostelName using the token\n    const token = localStorage.getItem('token');\n    console.log('Token:', token);\n    if (token) {\n      try {\n        const response = await axios.get('http://localhost:5000/api/auth/user', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        setHostelName(response.data.hostelName);\n        console.log('Hostel Name:', response.hostelName);\n        console.log('Category:', response.category);\n      } catch (error) {\n        console.error('Error fetching hostelName:', error);\n      }\n    } else {\n      console.log('No token found');\n    }\n  };\n\n  // Effect to check authentication on page load\n  useEffect(() => {\n    const authenticated = checkAuthentication();\n    setIsAuthenticated(authenticated);\n    if (authenticated) {\n      console.log('Authenticated:', authenticated);\n      fetchHostelName(); // Fetch hostelName if the user is authenticated\n    }\n  }, [isAuthenticated]);\n  return /*#__PURE__*/_jsxDEV(AuthProvider, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JkS3Meyzlj18m4l86SBr9YDqEkQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","axios","Login","AuthProvider","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","checkAuthentication","token","localStorage","getItem","fetchHostelName","console","log","response","get","headers","Authorization","setHostelName","data","hostelName","category","error","authenticated","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Out/my-outpass/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport axios from 'axios'; \r\nimport Login from './Components/Login';\r\n// import StudentDashboard from './Components/StudentDashboard';\r\n// import WardenDashboard from './Components/WardenDashboard';\r\nimport { AuthProvider } from './contexts/AuthContext';\r\n\r\nfunction App() {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  // const [hostelName, setHostelName] = useState(null);\r\n \r\n  // Function to check if the user is authenticated\r\n  const checkAuthentication = () => {\r\n    const token = localStorage.getItem('token');\r\n    return token !== null;\r\n  };\r\n\r\n  // Function to fetch the user's hostelName once they are logged in\r\n  const fetchHostelName = async () => {\r\n  //  // Fetch the user's hostelName using the token\r\n    const token = localStorage.getItem('token');\r\n    console.log('Token:', token);\r\n \r\n    if (token) {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/auth/user', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`\r\n          }\r\n        });\r\n        setHostelName(response.data.hostelName);\r\n        console.log('Hostel Name:', response.hostelName);\r\n        console.log('Category:', response.category);\r\n      } catch (error) {\r\n        console.error('Error fetching hostelName:', error);\r\n      } \r\n    } else {\r\n      console.log('No token found')\r\n    }\r\n  };\r\n  \r\n  // Effect to check authentication on page load\r\n  useEffect(() => {\r\n    const authenticated = checkAuthentication();\r\n    setIsAuthenticated(authenticated);\r\n    if (authenticated) {\r\n      console.log('Authenticated:', authenticated);\r\n      fetchHostelName();  // Fetch hostelName if the user is authenticated\r\n    }\r\n  }, [isAuthenticated]);\r\n \r\n  return (\r\n    <AuthProvider>\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Login />} />\r\n          {/* <>\r\n            <Route path=\"/student-dashboard\" element={<StudentDashboard />} />\r\n            <Route path=\"/warden-dashboard\" element={<WardenDashboard hostel={hostelName} />} />\r\n          </> */}\r\n        \r\n      </Routes>\r\n    </Router>\r\n    </AuthProvider>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AACzE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,oBAAoB;AACtC;AACA;AACA,SAASC,YAAY,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7D;;EAEA;EACA,MAAMe,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOF,KAAK,KAAK,IAAI;EACvB,CAAC;;EAED;EACA,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAY;IACpC;IACE,MAAMH,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3CE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,KAAK,CAAC;IAE5B,IAAIA,KAAK,EAAE;MACT,IAAI;QACF,MAAMM,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,qCAAqC,EAAE;UACtEC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUR,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UACxD;QACF,CAAC,CAAC;QACFQ,aAAa,CAACJ,QAAQ,CAACK,IAAI,CAACC,UAAU,CAAC;QACvCR,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEC,QAAQ,CAACM,UAAU,CAAC;QAChDR,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEC,QAAQ,CAACO,QAAQ,CAAC;MAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC,MAAM;MACLV,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC/B;EACF,CAAC;;EAED;EACApB,SAAS,CAAC,MAAM;IACd,MAAM8B,aAAa,GAAGhB,mBAAmB,CAAC,CAAC;IAC3CD,kBAAkB,CAACiB,aAAa,CAAC;IACjC,IAAIA,aAAa,EAAE;MACjBX,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEU,aAAa,CAAC;MAC5CZ,eAAe,CAAC,CAAC,CAAC,CAAE;IACtB;EACF,CAAC,EAAE,CAACN,eAAe,CAAC,CAAC;EAErB,oBACEH,OAAA,CAACF,YAAY;IAAAwB,QAAA,eACbtB,OAAA,CAACP,MAAM;MAAA6B,QAAA,eACLtB,OAAA,CAACL,MAAM;QAAA2B,QAAA,eACLtB,OAAA,CAACN,KAAK;UAAC6B,IAAI,EAAC,GAAG;UAACC,OAAO,eAAExB,OAAA,CAACH,KAAK;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMhC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEnB;AAAC1B,EAAA,CA1DQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AA6DZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}